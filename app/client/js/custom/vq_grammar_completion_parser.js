import { Elements } from '/libs/platform/collections'
(function() {
vq_grammar_completion_parser = (function() {	
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  async function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  async function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { Main: peg$parseMain },
        peg$startRuleFunction  = peg$parseMain,

        peg$c0 = "(*attr)",
        peg$c1 = { type: "literal", value: "(*attr)", description: "\"(*attr)\"" },
        peg$c2 = "(*sub)",
        peg$c3 = { type: "literal", value: "(*sub)", description: "\"(*sub)\"" },
        peg$c4 = "[ ]",
        peg$c5 = { type: "literal", value: "[ ]", description: "\"[ ]\"" },
        peg$c6 = "[ + ]",
        peg$c7 = { type: "literal", value: "[ + ]", description: "\"[ + ]\"" },
        peg$c8 = "(no_class)",
        peg$c9 = { type: "literal", value: "(no_class)", description: "\"(no_class)\"" },
        peg$c10 = "*",
        peg$c11 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c12 = "{",
        peg$c13 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c14 = "}",
        peg$c15 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c16 = "..",
        peg$c17 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c18 = "(",
        peg$c19 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c20 = ")",
        peg$c21 = { type: "literal", value: ")", description: "\")\"" },
        peg$c22 = ".",
        peg$c23 = { type: "literal", value: ".", description: "\".\"" },
        peg$c24 = "(.)",
        peg$c25 = { type: "literal", value: "(.)", description: "\"(.)\"" },
        peg$c26 = "(select this)",
        peg$c27 = { type: "literal", value: "(select this)", description: "\"(select this)\"" },
        peg$c28 = "(this)",
        peg$c29 = { type: "literal", value: "(this)", description: "\"(this)\"" },
        peg$c30 = "||",
        peg$c31 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c32 = "or",
        peg$c33 = { type: "literal", value: "OR", description: "\"OR\"" },
        peg$c34 = "&&",
        peg$c35 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c36 = "and",
        peg$c37 = { type: "literal", value: "AND", description: "\"AND\"" },
        peg$c38 = "in",
        peg$c39 = { type: "literal", value: "IN", description: "\"IN\"" },
        peg$c40 = "not",
        peg$c41 = { type: "literal", value: "NOT", description: "\"NOT\"" },
        peg$c42 = "++",
        peg$c43 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c44 = "+",
        peg$c45 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c46 = "-",
        peg$c47 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c48 = "!",
        peg$c49 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c50 = "/",
        peg$c51 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c52 = "true",
        peg$c53 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c54 = "false",
        peg$c55 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c56 = "^^",
        peg$c57 = { type: "literal", value: "^^", description: "\"^^\"" },
        peg$c58 = "count_distinct",
        peg$c59 = { type: "literal", value: "COUNT_DISTINCT", description: "\"COUNT_DISTINCT\"" },
        peg$c60 = "distinct",
        peg$c61 = { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
        peg$c62 = "count",
        peg$c63 = { type: "literal", value: "COUNT", description: "\"COUNT\"" },
        peg$c64 = "sum",
        peg$c65 = { type: "literal", value: "SUM", description: "\"SUM\"" },
        peg$c66 = "min",
        peg$c67 = { type: "literal", value: "MIN", description: "\"MIN\"" },
        peg$c68 = "max",
        peg$c69 = { type: "literal", value: "MAX", description: "\"MAX\"" },
        peg$c70 = "avg",
        peg$c71 = { type: "literal", value: "AVG", description: "\"AVG\"" },
        peg$c72 = "sample",
        peg$c73 = { type: "literal", value: "SAMPLE", description: "\"SAMPLE\"" },
        peg$c74 = "group_concat",
        peg$c75 = { type: "literal", value: "GROUP_CONCAT", description: "\"GROUP_CONCAT\"" },
        peg$c76 = "separator",
        peg$c77 = { type: "literal", value: "SEPARATOR", description: "\"SEPARATOR\"" },
        peg$c78 = ";",
        peg$c79 = { type: "literal", value: ";", description: "\";\"" },
        peg$c80 = "=",
        peg$c81 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c82 = ",",
        peg$c83 = { type: "literal", value: ",", description: "\",\"" },
        peg$c84 = "undef",
        peg$c85 = { type: "literal", value: "UNDEF", description: "\"UNDEF\"" },
        peg$c86 = "str",
        peg$c87 = { type: "literal", value: "STR", description: "\"STR\"" },
        peg$c88 = "lang",
        peg$c89 = { type: "literal", value: "LANG", description: "\"LANG\"" },
        peg$c90 = "datatype",
        peg$c91 = { type: "literal", value: "DATATYPE", description: "\"DATATYPE\"" },
        peg$c92 = "iri",
        peg$c93 = { type: "literal", value: "IRI", description: "\"IRI\"" },
        peg$c94 = "uri",
        peg$c95 = { type: "literal", value: "URI", description: "\"URI\"" },
        peg$c96 = "abs",
        peg$c97 = { type: "literal", value: "ABS", description: "\"ABS\"" },
        peg$c98 = "ceil",
        peg$c99 = { type: "literal", value: "CEIL", description: "\"CEIL\"" },
        peg$c100 = "floor",
        peg$c101 = { type: "literal", value: "FLOOR", description: "\"FLOOR\"" },
        peg$c102 = "round",
        peg$c103 = { type: "literal", value: "ROUND", description: "\"ROUND\"" },
        peg$c104 = "strlen",
        peg$c105 = { type: "literal", value: "STRLEN", description: "\"STRLEN\"" },
        peg$c106 = "ucase",
        peg$c107 = { type: "literal", value: "UCASE", description: "\"UCASE\"" },
        peg$c108 = "lcase",
        peg$c109 = { type: "literal", value: "LCASE", description: "\"LCASE\"" },
        peg$c110 = "encode_for_uri",
        peg$c111 = { type: "literal", value: "ENCODE_FOR_URI", description: "\"ENCODE_FOR_URI\"" },
        peg$c112 = "year",
        peg$c113 = { type: "literal", value: "YEAR", description: "\"YEAR\"" },
        peg$c114 = "month",
        peg$c115 = { type: "literal", value: "MONTH", description: "\"MONTH\"" },
        peg$c116 = "day",
        peg$c117 = { type: "literal", value: "DAY", description: "\"DAY\"" },
        peg$c118 = "timezone",
        peg$c119 = { type: "literal", value: "TIMEZONE", description: "\"TIMEZONE\"" },
        peg$c120 = "tz",
        peg$c121 = { type: "literal", value: "TZ", description: "\"TZ\"" },
        peg$c122 = "md5",
        peg$c123 = { type: "literal", value: "MD5", description: "\"MD5\"" },
        peg$c124 = "sha1",
        peg$c125 = { type: "literal", value: "SHA1", description: "\"SHA1\"" },
        peg$c126 = "sha256",
        peg$c127 = { type: "literal", value: "SHA256", description: "\"SHA256\"" },
        peg$c128 = "sha384",
        peg$c129 = { type: "literal", value: "SHA384", description: "\"SHA384\"" },
        peg$c130 = "sha512",
        peg$c131 = { type: "literal", value: "SHA512", description: "\"SHA512\"" },
        peg$c132 = "isiri",
        peg$c133 = { type: "literal", value: "isIRI", description: "\"isIRI\"" },
        peg$c134 = "isuri",
        peg$c135 = { type: "literal", value: "isURI", description: "\"isURI\"" },
        peg$c136 = "isblank",
        peg$c137 = { type: "literal", value: "isBLANK", description: "\"isBLANK\"" },
        peg$c138 = "datetime",
        peg$c139 = { type: "literal", value: "dateTime", description: "\"dateTime\"" },
        peg$c140 = "date",
        peg$c141 = { type: "literal", value: "date", description: "\"date\"" },
        peg$c142 = "isliteral",
        peg$c143 = { type: "literal", value: "isLITERAL", description: "\"isLITERAL\"" },
        peg$c144 = "isnumeric",
        peg$c145 = { type: "literal", value: "isNUMERIC", description: "\"isNUMERIC\"" },
        peg$c146 = "langmatches",
        peg$c147 = { type: "literal", value: "LANGMATCHES", description: "\"LANGMATCHES\"" },
        peg$c148 = "contains",
        peg$c149 = { type: "literal", value: "CONTAINS", description: "\"CONTAINS\"" },
        peg$c150 = "strstarts",
        peg$c151 = { type: "literal", value: "STRSTARTS", description: "\"STRSTARTS\"" },
        peg$c152 = "strends",
        peg$c153 = { type: "literal", value: "STRENDS", description: "\"STRENDS\"" },
        peg$c154 = "strbefore",
        peg$c155 = { type: "literal", value: "STRBEFORE", description: "\"STRBEFORE\"" },
        peg$c156 = "strafter",
        peg$c157 = { type: "literal", value: "STRAFTER", description: "\"STRAFTER\"" },
        peg$c158 = "strlang",
        peg$c159 = { type: "literal", value: "STRLANG", description: "\"STRLANG\"" },
        peg$c160 = "strdt",
        peg$c161 = { type: "literal", value: "STRDT", description: "\"STRDT\"" },
        peg$c162 = "sameterm",
        peg$c163 = { type: "literal", value: "sameTerm", description: "\"sameTerm\"" },
        peg$c164 = "days",
        peg$c165 = { type: "literal", value: "days", description: "\"days\"" },
        peg$c166 = "years",
        peg$c167 = { type: "literal", value: "years", description: "\"years\"" },
        peg$c168 = "months",
        peg$c169 = { type: "literal", value: "months", description: "\"months\"" },
        peg$c170 = "hours",
        peg$c171 = { type: "literal", value: "hours", description: "\"hours\"" },
        peg$c172 = "minutes",
        peg$c173 = { type: "literal", value: "minutes", description: "\"minutes\"" },
        peg$c174 = "seconds",
        peg$c175 = { type: "literal", value: "seconds", description: "\"seconds\"" },
        peg$c176 = "if",
        peg$c177 = { type: "literal", value: "IF", description: "\"IF\"" },
        peg$c178 = "coalesce",
        peg$c179 = { type: "literal", value: "COALESCE", description: "\"COALESCE\"" },
        peg$c180 = "bound",
        peg$c181 = { type: "literal", value: "BOUND", description: "\"BOUND\"" },
        peg$c182 = "bnode",
        peg$c183 = { type: "literal", value: "BNODE", description: "\"BNODE\"" },
        peg$c184 = "rand",
        peg$c185 = { type: "literal", value: "RAND", description: "\"RAND\"" },
        peg$c186 = "concat",
        peg$c187 = { type: "literal", value: "CONCAT", description: "\"CONCAT\"" },
        peg$c188 = "now",
        peg$c189 = { type: "literal", value: "NOW", description: "\"NOW\"" },
        peg$c190 = "uuid",
        peg$c191 = { type: "literal", value: "UUID", description: "\"UUID\"" },
        peg$c192 = "struuid",
        peg$c193 = { type: "literal", value: "STRUUID", description: "\"STRUUID\"" },
        peg$c194 = "??",
        peg$c195 = { type: "literal", value: "??", description: "\"??\"" },
        peg$c196 = "HASMAX",
        peg$c197 = { type: "literal", value: "HASMAX", description: "\"HASMAX\"" },
        peg$c198 = "HASRANK",
        peg$c199 = { type: "literal", value: "HASRANK", description: "\"HASRANK\"" },
        peg$c200 = "DESC",
        peg$c201 = { type: "literal", value: "DESC", description: "\"DESC\"" },
        peg$c202 = "|",
        peg$c203 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c204 = "GLOBAL",
        peg$c205 = { type: "literal", value: "GLOBAL", description: "\"GLOBAL\"" },
        peg$c206 = "FOR",
        peg$c207 = { type: "literal", value: "FOR", description: "\"FOR\"" },
        peg$c208 = "BY",
        peg$c209 = { type: "literal", value: "BY", description: "\"BY\"" },
        peg$c210 = "WHERE",
        peg$c211 = { type: "literal", value: "WHERE", description: "\"WHERE\"" },
        peg$c212 = "regex",
        peg$c213 = { type: "literal", value: "REGEX", description: "\"REGEX\"" },
        peg$c214 = "substring",
        peg$c215 = { type: "literal", value: "SUBSTRING", description: "\"SUBSTRING\"" },
        peg$c216 = "substr",
        peg$c217 = { type: "literal", value: "SUBSTR", description: "\"SUBSTR\"" },
        peg$c218 = "bif:substring",
        peg$c219 = { type: "literal", value: "bif:SUBSTRING", description: "\"bif:SUBSTRING\"" },
        peg$c220 = "bif:substr",
        peg$c221 = { type: "literal", value: "bif:SUBSTR", description: "\"bif:SUBSTR\"" },
        peg$c222 = "replace",
        peg$c223 = { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
        peg$c224 = "exists",
        peg$c225 = { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
        peg$c226 = "@",
        peg$c227 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c228 = /^[a-zA-Z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c229 = { type: "class", value: "[a-zA-Z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[a-zA-Z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c230 = /^[a-zA-Z0-9\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c231 = { type: "class", value: "[a-zA-Z0-9\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[a-zA-Z0-9\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c232 = "<",
        peg$c233 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c234 = /^[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c235 = { type: "class", value: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c236 = "_",
        peg$c237 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c238 = ":",
        peg$c239 = { type: "literal", value: ":", description: "\":\"" },
        peg$c240 = "#",
        peg$c241 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c242 = "%",
        peg$c243 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c244 = /^[0-9]/,
        peg$c245 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c246 = ">",
        peg$c247 = { type: "literal", value: ">", description: "\">\"" },
        peg$c248 = async function(LName) {return await afterVar(LName)},
        peg$c249 = async function(Var) {return await afterVar(Var)},
        peg$c250 = "`",
        peg$c251 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c252 = /^[eE]/,
        peg$c253 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c254 = /^[+\-]/,
        peg$c255 = { type: "class", value: "[+-]", description: "[+-]" },
        peg$c256 = "?",
        peg$c257 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c258 = "$",
        peg$c259 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c260 = "'",
        peg$c261 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c262 = "\"",
        peg$c263 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c264 = "[[",
        peg$c265 = { type: "literal", value: "[[", description: "\"[[\"" },
        peg$c266 = "]]",
        peg$c267 = { type: "literal", value: "]]", description: "\"]]\"" },
        peg$c268 = async function(PathAlternative) {return {PathAlternative:PathAlternative}},
        peg$c269 = async function(PathSequence) {return {PathSequence:PathSequence}},
        peg$c270 = async function(PathEltOrInverse) {return {PathEltOrInverse:PathEltOrInverse}},
        peg$c271 = async function(PathElt) {return {inv:"", PathElt:PathElt}},
        peg$c272 = async function(PathElt) {return {inv:"^", PathElt:PathElt}},
        peg$c273 = async function(PathPrimary, PathMod) {return {PathPrimary:PathPrimary, PathMod:PathMod}},
        peg$c274 = "a",
        peg$c275 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c276 = async function(PathNegatedPropertySet) {return {PathNegatedPropertySet:PathNegatedPropertySet}},
        peg$c277 = async function(PathOneInPropertySet) {return {PathOneInPropertySet:PathOneInPropertySet}},
        peg$c278 = async function(PathNegatedPropertySetBracketted) {return {PathNegatedPropertySetBracketted:PathNegatedPropertySetBracketted}},
        peg$c279 = async function(iriOra) {return {inv:"", iriOra:iriOra}},
        peg$c280 = async function(iriOra) {return {inv:"^", iriOra:iriOra}},
        peg$c281 = "^",
        peg$c282 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c283 = async function() {return await getInverseAssociations("^")},
        peg$c284 = "inv",
        peg$c285 = { type: "literal", value: "inv", description: "\"inv\"" },
        peg$c286 = async function() {return await getInverseAssociations("inv")},
        peg$c287 = async function(PrefixedName) {return {PrefixedName:PrefixedName}},
        peg$c288 = async function(Prefix) {return makeVar(Prefix)},
        peg$c289 = async function(PNAME_NS, LName) {return {var:{name:makeVar(LName),type:await resolveType(makeVar(PNAME_NS)+makeVar(LName)), kind:await resolveKind(makeVar(PNAME_NS)+makeVar(LName))}, Prefix:PNAME_NS}},
        peg$c290 = async function(LName) {return {var:{name:makeVar(LName),type:await resolveType(makeVar(LName)), kind:await resolveKind(makeVar(LName))}}},
        peg$c291 = async function() {return {Alternative:"|"}},
        peg$c292 = async function() {return {PathSymbol :"/"}},
        peg$c293 = async function(PathEltOrInverse) {return await pathOrReference(PathEltOrInverse)},
        peg$c294 = async function(Reference) {return await referenceNames(Reference)},
        peg$c295 = async function(Chars_String) {return makeVar(Chars_String)},
        peg$c296 = async function(INV, LName, Substring, FunctionBETWEEN, FunctionLike) {return { var:{INV:INV, name:makeVar(LName), type:await resolveType(makeVar(LName))}, Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c297 = async function(INV, LName, Substring, FunctionBETWEEN, FunctionLike) {return { var:{INV:"INV", name:makeVar(LName), type:await resolveType(makeVar(LName))}, Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c298 = "[",
        peg$c299 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c300 = "]",
        peg$c301 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c302 = " ",
        peg$c303 = { type: "literal", value: " ", description: "\" \"" },
        peg$c304 = "->",
        peg$c305 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c306 = "!=",
        peg$c307 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c308 = "<>",
        peg$c309 = { type: "literal", value: "<>", description: "\"<>\"" },
        peg$c310 = "<=",
        peg$c311 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c312 = ">=",
        peg$c313 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c314 = /^[\-_.:, \^$\/]/,
        peg$c315 = { type: "class", value: "[-_.:, ^$/]", description: "[-_.:, ^$/]" },
        peg$c316 = /^[\-_.:, \^$()!@#%&*+?|\/]/,
        peg$c317 = { type: "class", value: "[-_.:, ^$()!@#%&*+?|/]", description: "[-_.:, ^$()!@#%&*+?|/]" },
        peg$c318 = async function(string) {return {string: string.join("")}},
        peg$c319 = "like",
        peg$c320 = { type: "literal", value: "LIKE", description: "\"LIKE\"" },
        peg$c321 = "~*",
        peg$c322 = { type: "literal", value: "~*", description: "\"~*\"" },
        peg$c323 = "~",
        peg$c324 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c325 = "between",
        peg$c326 = { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
        peg$c327 = "",
        peg$c328 = async function() {await addContinuation(await location(), "[ ]", 10, false, 4);},
        peg$c329 = async function() {await addContinuation(await location(), "[ + ]", 10, false, 4);},
        peg$c330 = async function() {await addContinuation(await location(), " ", 1, false, 4);},
        peg$c331 = async function() {await addContinuation(await location(), "{", 10, false, 4);/*}*/},
        peg$c332 = async function() {await addContinuation(await location(), /*{*/"}", 10, false, 4);},
        peg$c333 = async function() {await addContinuation(await location(), "..", 10, false, 4);},
        peg$c334 = async function() {await addContinuation(await location(), ".", 32, false, 4);},
        peg$c335 = async function() {await addContinuation(await location(), "", 32, false, 4);},
        peg$c336 = async function() {await addContinuation(await location(), "", 1, false, 4);},
        peg$c337 = async function() {if(options.type=="attribute") await addContinuation(await location(), "(select this)", 10, false, 4); else await addContinuation(await location(), "", 1, false, 4);},
        peg$c338 = async function() {if(options.type!="attribute") await addContinuation(await location(), "(this)", 85, false, 4); else await addContinuation(await location(), "", 1, false, 4);},
        peg$c339 = async function() {await addContinuation(await location(), "||", 10, true, 4); await addContinuation(await location(), "OR", 10, true, 4);},
        peg$c340 = async function() {await addContinuation(await location(), "&&", 10, true, 4); await addContinuation(await location(), "AND", 10, true, 4);},
        peg$c341 = async function() {await addContinuation(await location(), "IN", 30, true, 4);},
        peg$c342 = async function() {await addContinuation(await location(), "NOT", 90, false, 4);},
        peg$c343 = async function() {await addContinuation(await location(), "NOT IN", 30, true, 4);},
        peg$c344 = async function() {await addContinuation(await location(), "++", 25, true, 4);},
        peg$c345 = async function() {await addContinuation(await location(), "+", 25, true, 4);},
        peg$c346 = async function() {await addContinuation(await location(), "-", 25, true, 4);},
        peg$c347 = async function() {await addContinuation(await location(), "!", 75, false, 4);},
        peg$c348 = async function() {await addContinuation(await location(), "a", 10, false, 4);},
        peg$c349 = async function() {await addContinuation(await location(), "*", 25, true, 4);},
        peg$c350 = async function() {await addContinuation(await location(), "/", 25, false, 4);},
        peg$c351 = async function() {await addContinuation(await location(), "/", 25, true, 4);},
        peg$c352 = async function() {await addContinuation(await location(), "true", 10, false, 4);},
        peg$c353 = async function() {await addContinuation(await location(), "false", 10, false, 4);},
        peg$c354 = async function() {await addContinuation(await location(), "^^", 10, false, 4);},
        peg$c355 = async function() {await addContinuation(await location(), "", 10, false, 4);},
        peg$c356 = async function() {await addContinuation(await location(), "(", 90, false, 4);},
        peg$c357 = async function() {await addContinuation(await location(), ")", 10, false, 4);},
        peg$c358 = async function() {if(options.type=="attribute") await addContinuation(await location(), "COUNT_DISTINCT", 35, false, 4); else await addContinuation(await location(), "", 1, false, 4);},
        peg$c359 = async function() {await addContinuation(await location(), "DISTINCT", 90, false, 4);},
        peg$c360 = async function() {if(options.type=="attribute") await addContinuation(await location(), "COUNT", 35, false, 4); else await addContinuation(await location(), "", 1, false, 4);},
        peg$c361 = async function() {if(options.type=="attribute")await addContinuation(await location(), "SUM", 35, false, 4);else await addContinuation(await location(), "", 1, false, 4);},
        peg$c362 = async function() {if(options.type=="attribute")await addContinuation(await location(), "MIN", 35, false, 4);else await addContinuation(await location(), "", 1, false, 4);},
        peg$c363 = async function() {if(options.type=="attribute")await addContinuation(await location(), "MAX", 35, false, 4);else await addContinuation(await location(), "", 1, false, 4);},
        peg$c364 = async function() {if(options.type=="attribute")await addContinuation(await location(), "AVG", 35, false, 4);else await addContinuation(await location(), "", 1, false, 4);},
        peg$c365 = async function() {if(options.type=="attribute")await addContinuation(await location(), "SAMPLE", 35, false, 4);else await addContinuation(await location(), "", 1, false, 4);},
        peg$c366 = async function() {if(options.type=="attribute")await addContinuation(await location(), "GROUP_CONCAT", 35, false, 4);else await addContinuation(await location(), "", 1, false, 4);},
        peg$c367 = async function() {await addContinuation(await location(), "SEPARATOR", 10, false, 4);},
        peg$c368 = async function() {await addContinuation(await location(), ";", 10, false, 4);},
        peg$c369 = async function() {await addContinuation(await location(), "=", 90, false, 4);},
        peg$c370 = async function() {await addContinuation(await location(), ",", 10, false, 4);},
        peg$c371 = async function() {await addContinuation(await location(), "UNDEF", 65, false, 4);},
        peg$c372 = async function() {await addContinuation(await location(), "STR", 65, false, 4);},
        peg$c373 = async function() {await addContinuation(await location(), "LANG", 55, false, 4);},
        peg$c374 = async function() {await addContinuation(await location(), "DATATYPE", 55, false, 4);},
        peg$c375 = async function() {await addContinuation(await location(), "IRI", 10, false, 4);},
        peg$c376 = async function() {await addContinuation(await location(), "URI", 10, false, 4);},
        peg$c377 = async function() {await addContinuation(await location(), "ABS", 10, false, 4);},
        peg$c378 = async function() {await addContinuation(await location(), "CEIL", 10, false, 4);},
        peg$c379 = async function() {await addContinuation(await location(), "FLOOR", 10, false, 4);},
        peg$c380 = async function() {await addContinuation(await location(), "ROUND", 10, false, 4);},
        peg$c381 = async function() {await addContinuation(await location(), "STRLEN", 10, false, 4);},
        peg$c382 = async function() {await addContinuation(await location(), "UCASE", 10, false, 4);},
        peg$c383 = async function() {await addContinuation(await location(), "LCASE", 10, false, 4);},
        peg$c384 = async function() {await addContinuation(await location(), "ENCODE_FOR_URI", 10, false, 4);},
        peg$c385 = async function() {await addContinuation(await location(), "YEAR", 45, false, 4);},
        peg$c386 = async function() {await addContinuation(await location(), "MONTH", 45, false, 4);},
        peg$c387 = async function() {await addContinuation(await location(), "DAY", 45, false, 4);},
        peg$c388 = async function() {await addContinuation(await location(), "TIMEZONE", 10, false, 4);},
        peg$c389 = async function() {await addContinuation(await location(), "TZ", 10, false, 4);},
        peg$c390 = async function() {await addContinuation(await location(), "MD5", 10, false, 4);},
        peg$c391 = async function() {await addContinuation(await location(), "SHA1", 10, false, 4);},
        peg$c392 = async function() {await addContinuation(await location(), "SHA256", 10, false, 4);},
        peg$c393 = async function() {await addContinuation(await location(), "SHA384", 10, false, 4);},
        peg$c394 = async function() {await addContinuation(await location(), "SHA512", 10, false, 4);},
        peg$c395 = async function() {await addContinuation(await location(), "isIRI", 10, false, 4);},
        peg$c396 = async function() {await addContinuation(await location(), "isURI", 10, false, 4);},
        peg$c397 = async function() {await addContinuation(await location(), "isBLANK", 10, false, 4);},
        peg$c398 = async function() {await addContinuation(await location(), "dateTime", 60, false, 4);},
        peg$c399 = async function() {await addContinuation(await location(), "date", 60, false, 4);},
        peg$c400 = async function() {await addContinuation(await location(), "isLITERAL", 10, false, 4);},
        peg$c401 = async function() {await addContinuation(await location(), "isNUMERIC", 10, false, 4);},
        peg$c402 = async function() {await addContinuation(await location(), "LANGMATCHES", 55, false, 4);},
        peg$c403 = async function() {await addContinuation(await location(), "CONTAINS", 50, false, 4);},
        peg$c404 = async function() {await addContinuation(await location(), "STRSTARTS", 10, false, 4);},
        peg$c405 = async function() {await addContinuation(await location(), "STRENDS", 10, false, 4);},
        peg$c406 = async function() {await addContinuation(await location(), "STRBEFORE", 10, false, 4);},
        peg$c407 = async function() {await addContinuation(await location(), "STRAFTER", 10, false, 4);},
        peg$c408 = async function() {await addContinuation(await location(), "STRLANG", 10, false, 4);},
        peg$c409 = async function() {await addContinuation(await location(), "STRDT", 10, false, 4);},
        peg$c410 = async function() {await addContinuation(await location(), "sameTerm", 10, false, 4);},
        peg$c411 = async function() {await addContinuation(await location(), "days", 40, false, 4);},
        peg$c412 = async function() {await addContinuation(await location(), "years", 40, false, 4);},
        peg$c413 = async function() {await addContinuation(await location(), "months", 40, false, 4);},
        peg$c414 = async function() {await addContinuation(await location(), "hours", 40, false, 4);},
        peg$c415 = async function() {await addContinuation(await location(), "minutes", 40, false, 4);},
        peg$c416 = async function() {await addContinuation(await location(), "seconds", 40, false, 4);},
        peg$c417 = async function() {await addContinuation(await location(), "IF", 70, false, 4);},
        peg$c418 = async function() {await addContinuation(await location(), "COALESCE", 70, false, 4);},
        peg$c419 = async function() {await addContinuation(await location(), "BOUND", 80, false, 4);},
        peg$c420 = async function() {await addContinuation(await location(), "BNODE", 10, false, 4);},
        peg$c421 = async function() {await addContinuation(await location(), "RAND", 10, false, 4);},
        peg$c422 = async function() {await addContinuation(await location(), "CONCAT", 55, false, 4);},
        peg$c423 = async function() {await addContinuation(await location(), "NOW", 10, false, 4);},
        peg$c424 = async function() {await addContinuation(await location(), "UUID", 10, false, 4);},
        peg$c425 = async function() {await addContinuation(await location(), "STRUUID", 10, false, 4);},
        peg$c426 = async function() {await addContinuation(await location(), "REGEX", 50, false, 4);},
        peg$c427 = async function() {await addContinuation(await location(), "SUBSTRING", 50, false, 4);},
        peg$c428 = async function() {await addContinuation(await location(), "SUBSTR", 50, false, 4);},
        peg$c429 = async function() {await addContinuation(await location(), "bif:SUBSTRING", 50, false, 4);},
        peg$c430 = async function() {await addContinuation(await location(), "bif:SUBSTR", 50, false, 4);},
        peg$c431 = async function() {await addContinuation(await location(), "REPLACE", 10, false, 4);},
        peg$c432 = async function() {await addContinuation(await location(), "EXISTS", 90, false, 4);},
        peg$c433 = async function() {await addContinuation(await location(), "@", 1, false, 4);},
        peg$c434 = async function() {await addContinuation(await location(), "", 30, false, 4);},
        peg$c435 = async function() {await addContinuation(await location(), "?", 1, false, 4);},
        peg$c436 = async function() {await addContinuation(await location(), "??", 1, false, 4);},
        peg$c437 = async function() {await addContinuation(await location(), "$", 10, false, 4);},
        peg$c438 = async function() {await addContinuation(await location(), "'", 10, false, 4);},
        peg$c439 = async function() {await addContinuation(await location(), '"', 10, false, 4);},
        peg$c440 = async function() {await addContinuation(await location(), "", 85, false, 4);},
        peg$c441 = async function() {await addContinuation(await location(), "[", 28, false, 4);},
        peg$c442 = async function() {await addContinuation(await location(), "]", 28, false, 4);},
        peg$c443 = async function() {await addContinuation(await location(), "[[", 28, false, 4);},
        peg$c444 = async function() {await addContinuation(await location(), "]]", 28, false, 4);},
        peg$c445 = async function() {await addContinuation(await location(), "->", 10, false, 4);await addContinuation(await location(), "=", 10, false, 4); await addContinuation(await location(), "!=", 10, false, 4);  await addContinuation(await location(), "<>", 10, false, 4);  await addContinuation(await location(), "<=", 10, false, 4);  await addContinuation(await location(), ">=", 10, false, 4);  await addContinuation(await location(), "<", 10, false, 4); await addContinuation(await location(), ">", 10, false, 4);},
        peg$c446 = async function() {await addContinuation(await location(), "LIKE", 30, true, 4); await addContinuation(await location(), "~*", 30, true, 4); await addContinuation(await location(), "~", 30, true, 4);},
        peg$c447 = async function() {await addContinuation(await location(), ">", 10, false, 4);},
        peg$c448 = async function() {await addContinuation(await location(), "<", 10, false, 4);},
        peg$c449 = async function() {await addContinuation(await location(), "%", 10, false, 4);},
        peg$c450 = async function() {await addContinuation(await location(), "BETWEEN", 30, true, 4);},
        peg$c451 = async function() {await addContinuation(await location(), "|", 10, false, 4);},
        peg$c452 = async function() {await addContinuation(await location(), ":", 10, false, 4);},
        peg$c453 = async function() {await addContinuation(await location(), "`", 1, false, 4);},
        peg$c454 = async function() {await getProperties(await location(), 91);},
        peg$c455 = async function() {await getReferences(await location(), 91);},
        peg$c456 = async function() {await getAssociations(await location(), 91);},
        peg$c457 = async function() {await error(await returnContinuation()); return;},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    async function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    async function location() {
      return await peg$computeLocation(peg$savedPos, peg$currPos);
    }

    async function expected(description) {
      throw await peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function error(message) {
      throw await peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    async function peg$computeLocation(startPos, endPos) {
      var startPosDetails = await peg$computePosDetails(startPos),
          endPosDetails   = await peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    async function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    async function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    async function peg$parseMain() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsespace();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c0) {
          s3 = peg$c0;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c1); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c2) {
            s3 = peg$c2;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c3); }
          }
        }
        if (s3 === peg$FAILED) {
          s3 = await peg$parseExpression();
        }
        if (s3 !== peg$FAILED) {
          s4 = await peg$parsespace();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseend();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpression() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseunit();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c4) {
          s2 = peg$c4;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c5); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = await peg$parseunion();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c6) {
            s2 = peg$c6;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c7); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = await peg$parseno_class();
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c8) {
              s2 = peg$c8;
              peg$currPos += 10;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c9); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = await peg$parseValueScope();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseConditionalOrExpression();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseclassExpr();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = await peg$parsestar();
                  if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                      s2 = peg$c10;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c11); }
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScope() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecurv_br_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c13); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseValueScopeA();
          if (s3 === peg$FAILED) {
            s3 = await peg$parseValueScopeB();
            if (s3 === peg$FAILED) {
              s3 = await peg$parseValueScopeC();
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsecurv_br_close();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c14;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c15); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScopeA() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseINTEGER();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsetwo_dots();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c16) {
            s3 = peg$c16;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c17); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseINTEGER();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScopeC() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseUNDEF();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePrimaryExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parsecomma_c();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parseComma();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsespace();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parseUNDEF();
              if (s7 === peg$FAILED) {
                s7 = await peg$parsePrimaryExpression();
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parsecomma_c();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parseComma();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parsespace();
              if (s6 !== peg$FAILED) {
                s7 = await peg$parseUNDEF();
                if (s7 === peg$FAILED) {
                  s7 = await peg$parsePrimaryExpression();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScopeB() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseScope();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parsecomma_c();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parseComma();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsespace();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parseScope();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parsecomma_c();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parseComma();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parsespace();
              if (s6 !== peg$FAILED) {
                s7 = await peg$parseScope();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseScope() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var key    = peg$currPos * 410 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebr_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = await peg$parseUNDEF();
            if (s5 === peg$FAILED) {
              s5 = await peg$parsePrimaryExpression();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = await peg$parsecomma_c();
              if (s8 !== peg$FAILED) {
                s9 = await peg$parseComma();
                if (s9 !== peg$FAILED) {
                  s10 = await peg$parsespace();
                  if (s10 !== peg$FAILED) {
                    s11 = await peg$parseUNDEF();
                    if (s11 === peg$FAILED) {
                      s11 = await peg$parsePrimaryExpression();
                    }
                    if (s11 !== peg$FAILED) {
                      s8 = [s8, s9, s10, s11];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = await peg$parsecomma_c();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parseComma();
                  if (s9 !== peg$FAILED) {
                    s10 = await peg$parsespace();
                    if (s10 !== peg$FAILED) {
                      s11 = await peg$parseUNDEF();
                      if (s11 === peg$FAILED) {
                        s11 = await peg$parsePrimaryExpression();
                      }
                      if (s11 !== peg$FAILED) {
                        s8 = [s8, s9, s10, s11];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsebr_close();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c20;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseclassExpr() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedot();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c22;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c23); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c24) {
          s0 = peg$c24;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c25); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = await peg$parseselect_this();
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c26) {
              s2 = peg$c26;
              peg$currPos += 13;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c27); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = await peg$parsethis_c();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c28) {
                s2 = peg$c28;
                peg$currPos += 6;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c29); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseConditionalOrExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseValueLogicalA();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parsespace();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parseOROriginal();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsespaceObl();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parseValueLogicalA();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parsespace();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parseOROriginal();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parsespaceObl();
              if (s6 !== peg$FAILED) {
                s7 = await peg$parseValueLogicalA();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseOROriginal() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseor();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c30) {
          s2 = peg$c30;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c31); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c32) {
            s2 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c33); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueLogicalA() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseRelationalExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parsespace();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parseANDOriginal();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsespaceObl();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parseRelationalExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parsespace();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parseANDOriginal();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parsespaceObl();
              if (s6 !== peg$FAILED) {
                s7 = await peg$parseRelationalExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseANDOriginal() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseand();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c34) {
          s2 = peg$c34;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c35); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {
            s2 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c37); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpression() {
      var s0;

      var key    = peg$currPos * 410 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseRelationalExpressionC();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseRelationalExpressionC1();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseRelationalExpressionB1();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseRelationalExpressionB2();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseRelationalExpressionB();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseAdditiveExpression();
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseRelation();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseAdditiveExpression();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionB1() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseclassExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseRelation();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseAdditiveExpression();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionB2() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseRelation();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseclassExpr();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionC() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseIN();
          if (s4 === peg$FAILED) {
            s4 = await peg$parseNOTIN();
          }
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseExpressionList2();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionC1() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseIN();
          if (s4 === peg$FAILED) {
            s4 = await peg$parseNOTIN();
          }
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseExpressionList3();
              if (s6 === peg$FAILED) {
                s6 = await peg$parseExpressionList4();
              }
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIN() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsein_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c38) {
          s2 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c39); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNOT() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsenot_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c41); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNOTIN() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsenotIn_c();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c41); }
        }
        if (s3 !== peg$FAILED) {
          s4 = await peg$parsespace();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c38) {
              s5 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c39); }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAdditiveExpression() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseMultiplicativeExpression();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseMultiplicativeExpressionListA();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMultiplicativeExpressionListA() {
      var s0, s1;

      var key    = peg$currPos * 410 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = await peg$parseMultiplicativeExpressionList();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = await peg$parseMultiplicativeExpressionList();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMultiplicativeExpressionList() {
      var s0;

      var key    = peg$currPos * 410 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseConcat();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseAdditive();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseNumericLiteralPositive();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseNumericLiteralNegative();
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseConcat() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseconcat_c();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c42) {
            s3 = peg$c42;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c43); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseMultiplicativeExpression();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAdditive() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 25,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parseplus();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s4 = peg$c44;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c45); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = await peg$parseminus();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c46;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c47); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseMultiplicativeExpression();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMultiplicativeExpression() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 26,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseUnaryExpressionListA();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpression() {
      var s0;

      var key    = peg$currPos * 410 + 27,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseUnaryExpressionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseUnaryExpressionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionA() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 28,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parseexclamation();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s4 = peg$c48;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c49); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = await peg$parseminus();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c46;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c47); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsePrimaryExpression();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionB() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 29,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePrimaryExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionListA() {
      var s0, s1;

      var key    = peg$currPos * 410 + 30,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = await peg$parseUnaryExpressionList();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = await peg$parseUnaryExpressionList();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionList() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 31,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsemult();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s4 = peg$c10;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c11); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = await peg$parsediv();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s4 = peg$c50;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c51); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseUnaryExpression();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrimaryExpression() {
      var s0;

      var key    = peg$currPos * 410 + 32,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseBooleanLiteral();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseBuiltInCall();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseQName();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseiriOrFunction();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseRDFLiteral();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseBrackettedExpression();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseNumericLiteral();
                  if (s0 === peg$FAILED) {
                    s0 = await peg$parseVar();
                    if (s0 === peg$FAILED) {
                      s0 = await peg$parseDoubleSquareBracketName();
                      if (s0 === peg$FAILED) {
                        s0 = await peg$parseLN();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrimaryExpression2() {
      var s0;

      var key    = peg$currPos * 410 + 33,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseBooleanLiteral();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseiriOrFunction();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseBuiltInCall2();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseRDFLiteral();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseBrackettedExpression();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseNumericLiteral();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseVar();
                  if (s0 === peg$FAILED) {
                    s0 = await peg$parseDoubleSquareBracketName();
                    if (s0 === peg$FAILED) {
                      s0 = await peg$parseQName();
                      if (s0 === peg$FAILED) {
                        s0 = await peg$parseLN();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBooleanLiteral() {
      var s0;

      var key    = peg$currPos * 410 + 34,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseTRUE();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseFALSE();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseTRUE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 35,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsetrue_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c52) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c53); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFALSE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 36,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsefalse_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c54) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c55); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRDFLiteral() {
      var s0;

      var key    = peg$currPos * 410 + 37,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseRDFLiteralA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseRDFLiteralB();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseStringQuotes();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRDFLiteralA() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 38,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseStringQuotes();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseLANGTAG();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRDFLiteralB() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 39,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseStringQuotes();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsedouble_check();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c56) {
            s3 = peg$c56;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c57); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseiri();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBrackettedExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 40,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebr_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsebr_close();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c20;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBuiltInCall() {
      var s0;

      var key    = peg$currPos * 410 + 41,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseAggregate();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseFunctionExpression();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseRegexExpression();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseSubstringExpression();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseSubstringBifExpression();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseStrReplaceExpression();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseExistsFunc();
                  if (s0 === peg$FAILED) {
                    s0 = await peg$parseNotExistsFunc();
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBuiltInCall2() {
      var s0;

      var key    = peg$currPos * 410 + 42,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseAggregate();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseRegexExpression();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseSubstringExpression();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseSubstringBifExpression();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseStrReplaceExpression();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseExistsFunc();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseNotExistsFunc();
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregate() {
      var s0;

      var key    = peg$currPos * 410 + 43,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseAggregateAO();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseAggregateA();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseAggregateB();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseAggregateC();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseAggregateD();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseAggregateE();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseAggregateF();
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateAO() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 44,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOUNT_DISTINCT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_close();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 45,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOUNT();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUM();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseMIN();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseMAX();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseAVG();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseSAMPLE();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseDISTINCT();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespaceObl();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsebr_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c20;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 46,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOUNT();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUM();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseMIN();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseMAX();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseAVG();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseSAMPLE();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_close();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 410 + 47,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseDISTINCT();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespaceObl();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseSEPARATOR();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsebr_close();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c20;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateD() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 48,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseSEPARATOR();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsebr_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c20;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateE() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 49,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseDISTINCT();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespaceObl();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsebr_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c20;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateF() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 50,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_close();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCOUNT_DISTINCT() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 51,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecount_distinct_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c58) {
          s2 = input.substr(peg$currPos, 14);
          peg$currPos += 14;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c59); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDISTINCT() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 52,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedistinct_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c60) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c61); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCOUNT() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 53,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecount_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c62) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c63); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUM() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 54,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsesum_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c64) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c65); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMIN() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 55,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsemin_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c66) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c67); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMAX() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 56,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsemax_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c68) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c69); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAVG() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 57,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseavg_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c70) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c71); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSAMPLE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 58,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsesample_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c72) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c73); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseGROUP_CONCAT() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 59,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsegroup_concat_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c74) {
          s2 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c75); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSEPARATORTer() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 60,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseseparator_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c76) {
          s2 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c77); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSEPARATOR() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 61,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsesemi_colon();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c78;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c79); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseSEPARATORTer();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseequal();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s7 = peg$c80;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c81); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseStringQuotes();
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = await peg$parsecomma_c();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c82;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c83); }
          }
          if (s2 !== peg$FAILED) {
            s3 = await peg$parsespace();
            if (s3 !== peg$FAILED) {
              s4 = await peg$parseStringQuotes();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpression() {
      var s0;

      var key    = peg$currPos * 410 + 62,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseFunctionExpressionC();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseFunctionExpressionA();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseFunctionExpressionB();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseIFFunction();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseFunctionExpressionD();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseFunctionExpressionLANGMATCHES();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseFunctionCOALESCE();
                  if (s0 === peg$FAILED) {
                    s0 = await peg$parseBOUNDFunction();
                    if (s0 === peg$FAILED) {
                      s0 = await peg$parseNilFunction();
                      if (s0 === peg$FAILED) {
                        s0 = await peg$parseBNODEFunction();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUNDEF() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 63,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseundef_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c84) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c85); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTR() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 64,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsestr_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c86) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c87); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANG() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 65,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parselang_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c88) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c89); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDATATYPE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 66,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedatatype_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c90) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c91); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIRI() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 67,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseiri_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c92) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c93); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseURI() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 68,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseuri_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c94) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c95); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseABS() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 69,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseabs_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c96) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c97); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCEIL() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 70,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseceil_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c98) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c99); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFLOOR() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 71,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsefloor_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c100) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c101); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseROUND() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 72,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseround_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c102) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c103); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRLEN() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 73,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsestrlen_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c104) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c105); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUCASE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 74,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseucase_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c106) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c107); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLCASE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 75,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parselcase_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c108) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c109); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseENCODE_FOR_URI() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 76,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseencode_for_uri_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c110) {
          s2 = input.substr(peg$currPos, 14);
          peg$currPos += 14;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c111); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseYEAR() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 77,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseyear_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c112) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c113); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMONTH() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 78,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsemonth_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c114) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c115); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDAY() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 79,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseday_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c116) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c117); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseTIMEZONE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 80,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsetime_zone_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c118) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c119); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseTZ() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 81,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsetz_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c120) {
          s2 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c121); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMD5() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 82,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsemd5_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c122) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c123); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA1() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 83,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsesha1_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c124) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c125); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA256() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 84,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSHA256_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c126) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA384() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 85,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSHA384_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c128) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c129); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA512() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 86,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSHA512_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c130) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c131); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisIRI() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 87,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseisIRI_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c132) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c133); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisURI() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 88,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseisURI_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c134) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c135); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisBLANK() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 89,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseisBLANK_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c136) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c137); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedateTime() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 90,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedateTime_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c138) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c139); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedate() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 91,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedate_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c140) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c141); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisLITERAL() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 92,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseisLITERAL_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c142) {
          s2 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c143); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisNUMERIC() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 93,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseisNUMERIC_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c144) {
          s2 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c145); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGMATCHES() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 94,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseLANGMATCHES_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c146) {
          s2 = input.substr(peg$currPos, 11);
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c147); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCONTAINS() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 95,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCONTAINS_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c148) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c149); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRSTARTS() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 96,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTRSTARTS_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c150) {
          s2 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c151); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRENDS() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 97,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTRENDS_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c152) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c153); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRBEFORE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 98,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTRBEFORE_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c154) {
          s2 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c155); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRAFTER() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 99,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTRAFTER_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c156) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c157); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRLANG() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 100,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTRLANG_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c158) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c159); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRDT() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 101,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTRDT_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c160) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c161); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesameTerm() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 102,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsesameTerm_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c162) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c163); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedays() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 103,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedays_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c164) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c165); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseyears() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 104,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseyears_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c166) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c167); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemonths() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 105,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsemonths_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c168) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c169); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseHOURS2() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 106,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsehours_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c170) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c171); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsehours() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 107,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsehours_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c170) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c171); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseminutes() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 108,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseminutes_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c172) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c173); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMINUTES2() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 109,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseminutes_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c172) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c173); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseseconds() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 110,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseseconds_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c174) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c175); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSECONDS2() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 111,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseseconds_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c174) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c175); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIF() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 112,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseif_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c176) {
          s2 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c177); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCOALESCE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 113,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOALESCE_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c178) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c179); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBOUND() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 114,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBOUND_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c180) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c181); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 115,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBNODE_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c182) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c183); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRAND() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 116,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseRAND_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c184) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c185); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCONCAT() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 117,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCONCAT_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c186) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c187); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNOW() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 118,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOW_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c188) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c189); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUUID() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 119,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseUUID_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c190) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c191); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRUUID() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 120,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTRUUID_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c192) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c193); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 121,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTR();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseLANG();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseDATATYPE();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseIRI();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseURI();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseABS();
                if (s1 === peg$FAILED) {
                  s1 = await peg$parseCEIL();
                  if (s1 === peg$FAILED) {
                    s1 = await peg$parseFLOOR();
                    if (s1 === peg$FAILED) {
                      s1 = await peg$parseROUND();
                      if (s1 === peg$FAILED) {
                        s1 = await peg$parseSTRLEN();
                        if (s1 === peg$FAILED) {
                          s1 = await peg$parseUCASE();
                          if (s1 === peg$FAILED) {
                            s1 = await peg$parseLCASE();
                            if (s1 === peg$FAILED) {
                              s1 = await peg$parseENCODE_FOR_URI();
                              if (s1 === peg$FAILED) {
                                s1 = await peg$parseYEAR();
                                if (s1 === peg$FAILED) {
                                  s1 = await peg$parseMONTH();
                                  if (s1 === peg$FAILED) {
                                    s1 = await peg$parseDAY();
                                    if (s1 === peg$FAILED) {
                                      s1 = await peg$parseHOURS2();
                                      if (s1 === peg$FAILED) {
                                        s1 = await peg$parseMINUTES2();
                                        if (s1 === peg$FAILED) {
                                          s1 = await peg$parseSECONDS2();
                                          if (s1 === peg$FAILED) {
                                            s1 = await peg$parseTIMEZONE();
                                            if (s1 === peg$FAILED) {
                                              s1 = await peg$parseTZ();
                                              if (s1 === peg$FAILED) {
                                                s1 = await peg$parseMD5();
                                                if (s1 === peg$FAILED) {
                                                  s1 = await peg$parseSHA1();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = await peg$parseSHA256();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = await peg$parseSHA384();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = await peg$parseSHA512();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = await peg$parseisIRI();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = await peg$parseisURI();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = await peg$parseisBLANK();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = await peg$parsedateTime();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = await peg$parsedate();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = await peg$parseisLITERAL();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = await peg$parseisNUMERIC();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_close();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 410 + 122,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseLANGMATCHES();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseCONTAINS();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseSTRSTARTS();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseSTRENDS();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseSTRBEFORE();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseSTRAFTER();
                if (s1 === peg$FAILED) {
                  s1 = await peg$parseSTRLANG();
                  if (s1 === peg$FAILED) {
                    s1 = await peg$parseSTRDT();
                    if (s1 === peg$FAILED) {
                      s1 = await peg$parsesameTerm();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsebr_close();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c20;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                              }
                              if (s13 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 410 + 123,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedays();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseyears();
        if (s1 === peg$FAILED) {
          s1 = await peg$parsemonths();
          if (s1 === peg$FAILED) {
            s1 = await peg$parsehours();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseminutes();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseseconds();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsePrimaryExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseminus();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s8 = peg$c46;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c47); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsePrimaryExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsebr_close();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c20;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                              }
                              if (s13 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionD() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 124,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOALESCE();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseCONCAT();
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseExpressionList2();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionCOALESCE() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 125,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePrimaryExpression2();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsedubble_question();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c194) {
              s4 = peg$c194;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c195); }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsePrimaryExpression2();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionLANGMATCHES() {
      var s0;

      var key    = peg$currPos * 410 + 126,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseFunctionExpressionLANGMATCHESA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseFunctionExpressionLANGMATCHESB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionLANGMATCHESA() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 127,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_LN();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseQName();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseLN();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseLANGTAG_MUL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionLANGMATCHESB() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 128,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_LN();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseQName();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseLN();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseLANGTAG();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBOUNDFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 129,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBOUND();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsePrimaryExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_open();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNilFunction() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 130,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseRAND();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseNOW();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseUUID();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseSTRUUID();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseNIL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODEFunction() {
      var s0;

      var key    = peg$currPos * 410 + 131,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseBNODEFunctionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseBNODEFunctionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODEFunctionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 132,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBNODE();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_open();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODEFunctionB() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 133,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBNODE();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseNIL();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIFFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

      var key    = peg$currPos * 410 + 134,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseIF();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsecomma_c();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s13 = peg$c82;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = await peg$parsespace();
                                if (s14 !== peg$FAILED) {
                                  s15 = await peg$parseExpression();
                                  if (s15 !== peg$FAILED) {
                                    s16 = await peg$parsespace();
                                    if (s16 !== peg$FAILED) {
                                      s17 = await peg$parsebr_close();
                                      if (s17 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s18 = peg$c20;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseHASMAX() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 135,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c196) {
        s1 = peg$c196;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c197); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseSpecialExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c20;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseHASRANK() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 136,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c198) {
        s1 = peg$c198;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c199); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseSpecialExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c20;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSpecialExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      var key    = peg$currPos * 410 + 137,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePrimaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c200) {
            s3 = peg$c200;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c201); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s6 = peg$c202;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c203); }
              }
              if (s6 !== peg$FAILED) {
                s7 = await peg$parsespace();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c204) {
                    s8 = peg$c204;
                    peg$currPos += 6;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c205); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c206) {
                      s9 = peg$c206;
                      peg$currPos += 3;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c207); }
                    }
                    if (s9 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c208) {
                        s9 = peg$c208;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c209); }
                      }
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = await peg$parsespace();
                      if (s10 !== peg$FAILED) {
                        s11 = await peg$parseExpression();
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = await peg$parsespace();
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 124) {
                        s11 = peg$c202;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c203); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = await peg$parsespace();
                        if (s12 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c210) {
                            s13 = peg$c210;
                            peg$currPos += 5;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c211); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = await peg$parsespace();
                            if (s14 !== peg$FAILED) {
                              s15 = await peg$parseExpression();
                              if (s15 !== peg$FAILED) {
                                s10 = [s10, s11, s12, s13, s14, s15];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8, s9];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRegexExpression() {
      var s0;

      var key    = peg$currPos * 410 + 138,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseRegexExpressionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseRegexExpressionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRegexExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 410 + 139,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREGEX();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseComma();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseExpression();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = await peg$parseComma();
                        if (s11 !== peg$FAILED) {
                          s12 = await peg$parsespace();
                          if (s12 !== peg$FAILED) {
                            s13 = await peg$parseExpression();
                            if (s13 !== peg$FAILED) {
                              s11 = [s11, s12, s13];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsebr_close();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c20;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                              }
                              if (s13 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRegexExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      var key    = peg$currPos * 410 + 140,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREGEX();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseComma();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseExpression();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsespace();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsebr_close();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s12 = peg$c20;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                            }
                            if (s12 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseREGEX() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 141,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREGEX_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c212) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c213); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUBSTRING() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 142,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSUBSTRING_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c214) {
          s2 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c215); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUBSTR() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 143,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSUBSTR_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c216) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c217); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebifSUBSTRING() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 144,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebif_SUBSTRING_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c218) {
          s2 = input.substr(peg$currPos, 13);
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c219); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebifSUBSTR() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 145,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebif_SUBSTR_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c220) {
          s2 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c221); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseREPLACE() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 146,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREPLACE_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c222) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c223); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseEXISTS() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 147,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseEXISTS_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c224) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c225); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringExpression() {
      var s0;

      var key    = peg$currPos * 410 + 148,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseSubstringExpressionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseSubstringExpressionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      var key    = peg$currPos * 410 + 149,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsecomma_c();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s12 = peg$c82;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = await peg$parsespace();
                              if (s13 !== peg$FAILED) {
                                s14 = await peg$parseExpression();
                                if (s14 !== peg$FAILED) {
                                  s15 = await peg$parsespace();
                                  if (s15 !== peg$FAILED) {
                                    s16 = await peg$parsebr_close();
                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s17 = peg$c20;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 410 + 150,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsebr_close();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c20;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                              }
                              if (s13 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringBifExpression() {
      var s0;

      var key    = peg$currPos * 410 + 151,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseSubstringBifExpressionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseSubstringBifExpressionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringBifExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      var key    = peg$currPos * 410 + 152,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebifSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsebifSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsecomma_c();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s12 = peg$c82;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = await peg$parsespace();
                              if (s13 !== peg$FAILED) {
                                s14 = await peg$parseExpression();
                                if (s14 !== peg$FAILED) {
                                  s15 = await peg$parsespace();
                                  if (s15 !== peg$FAILED) {
                                    s16 = await peg$parsebr_close();
                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s17 = peg$c20;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringBifExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 410 + 153,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebifSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsebifSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsebr_close();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c20;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                              }
                              if (s13 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStrReplaceExpression() {
      var s0;

      var key    = peg$currPos * 410 + 154,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseStrReplaceExpressionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseStrReplaceExpressionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStrReplaceExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      var key    = peg$currPos * 410 + 155,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREPLACE();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsecomma_c();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s12 = peg$c82;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = await peg$parsespace();
                              if (s13 !== peg$FAILED) {
                                s14 = await peg$parseExpression();
                                if (s14 !== peg$FAILED) {
                                  s15 = await peg$parsespace();
                                  if (s15 !== peg$FAILED) {
                                    s16 = await peg$parsebr_close();
                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s17 = peg$c20;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStrReplaceExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 410 + 156,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREPLACE();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsecomma_c();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c82;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsebr_close();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c20;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                              }
                              if (s13 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFunc() {
      var s0;

      var key    = peg$currPos * 410 + 157,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseExistsFuncA1();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseExistsFuncA();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseExistsFuncB();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFuncA1() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 158,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseEXISTS();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsebr_open();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c18;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c19); }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_close();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFuncA() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 159,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseEXISTS();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFuncB() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 160,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecurv_br_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c13); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsecurv_br_close();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c14;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFunc() {
      var s0;

      var key    = peg$currPos * 410 + 161,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseNotExistsFuncA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseNotExistsFuncB1();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseNotExistsFuncB();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseNotExistsFuncC1();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseNotExistsFuncC();
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 162,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsecurv_br_open();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s4 = peg$c12;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c13); }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsecurv_br_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c14;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncB() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 163,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseEXISTS();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespaceObl();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncB1() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 410 + 164,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseEXISTS();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsebr_open();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s6 = peg$c18;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c19); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsebr_close();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c20;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncC() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 165,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncC1() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 166,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsebr_open();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c18;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c19); }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_close();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpressionList2() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 410 + 167,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseNIL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = await peg$parsebr_open();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c18;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s2 !== peg$FAILED) {
            s3 = await peg$parsespace();
            if (s3 !== peg$FAILED) {
              s4 = await peg$parseExpression();
              if (s4 !== peg$FAILED) {
                s5 = await peg$parsespace();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$currPos;
                  s8 = await peg$parseComma();
                  if (s8 !== peg$FAILED) {
                    s9 = await peg$parsespace();
                    if (s9 !== peg$FAILED) {
                      s10 = await peg$parseExpression();
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$currPos;
                    s8 = await peg$parseComma();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseExpression();
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = await peg$parsespace();
                    if (s7 !== peg$FAILED) {
                      s8 = await peg$parsebr_close();
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s9 = peg$c20;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                        }
                        if (s9 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpressionList3() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 410 + 168,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecurv_br_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c13); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = await peg$parseComma();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parsespace();
                  if (s9 !== peg$FAILED) {
                    s10 = await peg$parseExpression();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = await peg$parseComma();
                  if (s8 !== peg$FAILED) {
                    s9 = await peg$parsespace();
                    if (s9 !== peg$FAILED) {
                      s10 = await peg$parseExpression();
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsecurv_br_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c14;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpressionList4() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      var key    = peg$currPos * 410 + 169,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecurv_br_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c13); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseINTEGER();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsetwo_dots();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c16) {
                    s7 = peg$c16;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseINTEGER();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsespace();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsecurv_br_close();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s12 = peg$c14;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                            }
                            if (s12 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseComma() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 170,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecomma_c();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c82;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c83); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGTAG() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 171,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (peg$c228.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c229); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (input.charCodeAt(peg$currPos) === 45) {
              s6 = peg$c46;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c47); }
            }
            if (s6 === peg$FAILED) {
              if (peg$c230.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c231); }
              }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c46;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c47); }
              }
              if (s6 === peg$FAILED) {
                if (peg$c230.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c231); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGTAG_MUL() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 172,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsebr_open();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c18;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c19); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              if (peg$c228.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c229); }
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                if (input.charCodeAt(peg$currPos) === 45) {
                  s9 = peg$c46;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c47); }
                }
                if (s9 === peg$FAILED) {
                  if (peg$c230.test(input.charAt(peg$currPos))) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c231); }
                  }
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s9 = peg$c46;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c47); }
                  }
                  if (s9 === peg$FAILED) {
                    if (peg$c230.test(input.charAt(peg$currPos))) {
                      s9 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c231); }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = await peg$parseLANGTAG_LIST();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = await peg$parseLANGTAG_LIST();
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsebr_close();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c20;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGTAG_LIST() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 173,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseComma();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (peg$c228.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c229); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (input.charCodeAt(peg$currPos) === 45) {
              s6 = peg$c46;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c47); }
            }
            if (s6 === peg$FAILED) {
              if (peg$c230.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c231); }
              }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c46;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c47); }
              }
              if (s6 === peg$FAILED) {
                if (peg$c230.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c231); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiri() {
      var s0;

      var key    = peg$currPos * 410 + 174,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseIRIREF();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePNAME_LN();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIRIREF() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 175,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseless();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s2 = peg$c232;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c233); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsestring_c();
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c234.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c235); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s5 = peg$c236;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c237); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s5 = peg$c238;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c239); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c22;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c23); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 35) {
                      s5 = peg$c240;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c241); }
                    }
                    if (s5 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 47) {
                        s5 = peg$c50;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c51); }
                      }
                      if (s5 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                          s5 = peg$c46;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c47); }
                        }
                        if (s5 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 37) {
                            s5 = peg$c242;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c243); }
                          }
                          if (s5 === peg$FAILED) {
                            if (peg$c244.test(input.charAt(peg$currPos))) {
                              s5 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c234.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c235); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s5 = peg$c236;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c237); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s5 = peg$c238;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c239); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s5 = peg$c22;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c23); }
                    }
                    if (s5 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 35) {
                        s5 = peg$c240;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c241); }
                      }
                      if (s5 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 47) {
                          s5 = peg$c50;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c51); }
                        }
                        if (s5 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 45) {
                            s5 = peg$c46;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c47); }
                          }
                          if (s5 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 37) {
                              s5 = peg$c242;
                              peg$currPos++;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c243); }
                            }
                            if (s5 === peg$FAILED) {
                              if (peg$c244.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsemore();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s6 = peg$c246;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c247); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_NS() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 176,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePN_PREFIX();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsecolon();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c238;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c239); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_LN() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 177,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePNAME_LN2();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c248(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_LN2() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 178,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePropertyReference();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parsePNAME_NS();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseChars_String_variables();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = await peg$parsestring_c();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseChars_String_prefix();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseSubstring();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseBetweenExpression();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseLikeExpression();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePN_PREFIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 179,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsestring_c();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_prefix();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePN_LOCAL() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 180,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsevariables_c();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c249(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePropertyReference() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 181,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePropertyReference_c();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 96) {
          s2 = peg$c250;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c251); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiriOrFunction() {
      var s0;

      var key    = peg$currPos * 410 + 182,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseiriOrFunctionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseiri();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiriOrFunctionA() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 183,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseiri();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseArgList();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgList() {
      var s0;

      var key    = peg$currPos * 410 + 184,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseArgListA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseArgListB();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseNIL();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgListA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 185,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebr_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseDISTINCT();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespaceObl();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseArgListExpression();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsebr_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c20;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgListB() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 186,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebr_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseArgListExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsebr_close();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c20;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNIL() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 187,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebr_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsebr_close();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c20;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c21); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgListExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 188,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parseComma();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseExpression();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parseComma();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteral() {
      var s0;

      var key    = peg$currPos * 410 + 189,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseNumericLiteralUnsigned();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseNumericLiteralPositive();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseNumericLiteralNegative();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteralUnsigned() {
      var s0;

      var key    = peg$currPos * 410 + 190,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseDOUBLE();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseDECIMAL();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseINTEGER();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteralPositive() {
      var s0;

      var key    = peg$currPos * 410 + 191,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseDECIMAL_POSITIVE();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseDOUBLE_POSITIVE();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseINTEGER_POSITIVE();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteralNegative() {
      var s0;

      var key    = peg$currPos * 410 + 192,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseDECIMAL_NEGATIVE();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseDOUBLE_NEGATIVE();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseINTEGER_NEGATIVE();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDECIMAL() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 193,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c244.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c245); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c244.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c245); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsedot();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c22;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c23); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c244.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDOUBLE() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 194,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c244.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c245); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c244.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c245); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsedot();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c22;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c23); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c244.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c245); }
              }
            }
            if (s4 !== peg$FAILED) {
              if (peg$c252.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c253); }
              }
              if (s5 !== peg$FAILED) {
                if (peg$c254.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c255); }
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  if (peg$c244.test(input.charAt(peg$currPos))) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                  }
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      if (peg$c244.test(input.charAt(peg$currPos))) {
                        s8 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                      }
                    }
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c22;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c23); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c244.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c245); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c244.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c245); }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (peg$c252.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c253); }
            }
            if (s3 !== peg$FAILED) {
              if (peg$c254.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c255); }
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$c244.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c244.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          if (peg$c244.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c245); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c244.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c245); }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            if (peg$c252.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c253); }
            }
            if (s2 !== peg$FAILED) {
              if (peg$c254.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c255); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                if (peg$c244.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                }
                if (s5 !== peg$FAILED) {
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (peg$c244.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                    }
                  }
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseINTEGER() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 195,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseint_c();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c244.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c245); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseINTEGER_POSITIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 196,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseplus();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c44;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c45); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseINTEGER();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDECIMAL_POSITIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 197,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseplus();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c44;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c45); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDECIMAL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDOUBLE_POSITIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 198,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseminus();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c46;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDOUBLE();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseINTEGER_NEGATIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 199,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseminus();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c46;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseINTEGER();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDECIMAL_NEGATIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 200,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseminus();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c46;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDECIMAL();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDOUBLE_NEGATIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 201,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseminus();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c46;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDOUBLE();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVar() {
      var s0;

      var key    = peg$currPos * 410 + 202,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseVAR1();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseVAR2();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseVAR3();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVAR1() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 203,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedubble_question();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c194) {
          s2 = peg$c194;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c195); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseVARNAME();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVAR2() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 204,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsequestion();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s2 = peg$c256;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c257); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseVARNAME();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVAR3() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 205,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedollar();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s2 = peg$c258;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c259); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseVARNAME();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVARNAME() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 206,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c234.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c235); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c236;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c237); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c234.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c235); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c236;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c237); }
          }
          if (s3 === peg$FAILED) {
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c234.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c235); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c237); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c244.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c245); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStringQuotes() {
      var s0;

      var key    = peg$currPos * 410 + 207,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseSTRING_LITERAL1();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseSTRING_LITERAL2();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRING_LITERAL1() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 208,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsequote();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c260;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c261); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsestring_c();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsestringQ();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsequote();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s6 = peg$c260;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c261); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRING_LITERAL2() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 209,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedubble_quote();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c262;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c263); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsestring_c();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsestringQ();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsedubble_quote();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s6 = peg$c262;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c263); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseQName() {
      var s0;

      var key    = peg$currPos * 410 + 210,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parsePath();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePathBrRound();
        if (s0 === peg$FAILED) {
          s0 = await peg$parsePathBr();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseQNameReference();
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePath() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 211,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathAlternative();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseSubstring();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseBetweenExpression();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseLikeExpression();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathBrRound() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      var key    = peg$currPos * 410 + 212,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedouble_squere_br_open();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c264) {
          s2 = peg$c264;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c265); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsebr_open();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c18;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c19); }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsePathAlternativeBr();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseSubstring();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsebr_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c20;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsedouble_squere_br_close();
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c266) {
                            s11 = peg$c266;
                            peg$currPos += 2;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c267); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsespace();
                            if (s12 !== peg$FAILED) {
                              s13 = await peg$parseBetweenExpression();
                              if (s13 === peg$FAILED) {
                                s13 = null;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = await peg$parseLikeExpression();
                                if (s14 === peg$FAILED) {
                                  s14 = null;
                                }
                                if (s14 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathBr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 410 + 213,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedouble_squere_br_open();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c264) {
          s2 = peg$c264;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c265); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsePathAlternativeBr();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseSubstring();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsedouble_squere_br_close();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c266) {
                    s7 = peg$c266;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c267); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseBetweenExpression();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseLikeExpression();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathAlternative() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 214,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathSequence();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsespace();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parseVERTICAL();
          if (s6 !== peg$FAILED) {
            s7 = await peg$parsespace();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parsePathSequence();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseVERTICAL();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parsespace();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsePathSequence();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c268(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathAlternativeBr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 215,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathSequenceBr();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsespace();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parseVERTICAL();
          if (s6 !== peg$FAILED) {
            s7 = await peg$parsespace();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parsePathSequenceBr();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseVERTICAL();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parsespace();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsePathSequenceBr();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c268(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathSequence() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 216,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = await peg$parsePEPS();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = await peg$parsePEPS();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathEltOrInverse();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c269(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathSequenceBr() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 217,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = await peg$parsePEPS();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = await peg$parsePEPS();
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathEltOrInverse();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c269(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathEltOrInverse() {
      var s0, s1;

      var key    = peg$currPos * 410 + 218,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathElt3();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePathElt1();
        if (s1 === peg$FAILED) {
          s1 = await peg$parsePathElt2();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c270(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt1() {
      var s0, s1;

      var key    = peg$currPos * 410 + 219,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathElt();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c271(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt2() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 220,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCheck();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathElt();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c272(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt3() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 410 + 221,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseInv();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsePathElt();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsebr_close();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c20;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = await peg$c272(s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 222,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathPrimary();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathMod();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c273(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathPrimary() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 223,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseexclamation();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s2 = peg$c48;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c49); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePathNegatedPropertySet();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = await peg$parseiriP();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = await peg$parsebr_open();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c18;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c19); }
            }
            if (s2 !== peg$FAILED) {
              s3 = await peg$parsespace();
              if (s3 !== peg$FAILED) {
                s4 = await peg$parsePath();
                if (s4 !== peg$FAILED) {
                  s5 = await peg$parsespace();
                  if (s5 !== peg$FAILED) {
                    s6 = await peg$parsebr_close();
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s7 = peg$c20;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                      }
                      if (s7 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = await peg$parseLNameP();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = await peg$parsea_c();
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 97) {
                  s2 = peg$c274;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c275); }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet() {
      var s0, s1;

      var key    = peg$currPos * 410 + 224,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathNegatedPropertySet2();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePathNegatedPropertySet1();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c276(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet1() {
      var s0, s1;

      var key    = peg$currPos * 410 + 225,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathOneInPropertySet();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c277(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet2() {
      var s0, s1;

      var key    = peg$currPos * 410 + 226,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathNegatedPropertySetBracketted();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c278(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySetBracketted() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var key    = peg$currPos * 410 + 227,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebr_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = await peg$parsespace();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsePathOneInPropertySet();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = await peg$parsespace();
              if (s8 !== peg$FAILED) {
                s9 = await peg$parseVERTICAL();
                if (s9 !== peg$FAILED) {
                  s10 = await peg$parsespace();
                  if (s10 !== peg$FAILED) {
                    s11 = await peg$parsePathOneInPropertySet();
                    if (s11 !== peg$FAILED) {
                      s8 = [s8, s9, s10, s11];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = await peg$parsespace();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parseVERTICAL();
                  if (s9 !== peg$FAILED) {
                    s10 = await peg$parsespace();
                    if (s10 !== peg$FAILED) {
                      s11 = await peg$parsePathOneInPropertySet();
                      if (s11 !== peg$FAILED) {
                        s8 = [s8, s9, s10, s11];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsebr_close();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c20;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet() {
      var s0;

      var key    = peg$currPos * 410 + 228,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parsePathOneInPropertySet3();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePathOneInPropertySet1();
        if (s0 === peg$FAILED) {
          s0 = await peg$parsePathOneInPropertySet2();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet1() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 229,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseiriP();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseLNameP();
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = await peg$parsea_c();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 97) {
              s4 = peg$c274;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c275); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 97) {
              s3 = peg$c274;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c275); }
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c279(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet2() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 230,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCheck();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseiriP();
        if (s2 === peg$FAILED) {
          s2 = await peg$parseLNameP();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            s4 = await peg$parsea_c();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 97) {
                s5 = peg$c274;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c275); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 97) {
                s4 = peg$c274;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c275); }
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c280(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet3() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 410 + 231,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseInv();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebr_open();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseiriP();
            if (s4 === peg$FAILED) {
              s4 = await peg$parseLNameP();
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$currPos;
                s6 = await peg$parsea_c();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 97) {
                    s7 = peg$c274;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c275); }
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 97) {
                    s6 = peg$c274;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c275); }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsebr_close();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c20;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c280(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCheck() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 232,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecheck_c();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s2 = peg$c281;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c282); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c283();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseInv() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 233,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseinv_c();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c284) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c285); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c286();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiriP() {
      var s0;

      var key    = peg$currPos * 410 + 234,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseIRIREF();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePrefixedNameP();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrefixedNameP() {
      var s0, s1;

      var key    = peg$currPos * 410 + 235,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_LNP();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePNAME_NSP();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c287(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_NSP() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 236,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePN_PREFIX();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parsecolon_c();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c238;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c239); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c288(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_LNP() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 237,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePNAME_LNP2();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c248(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_LNP2() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 238,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_NSP();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsesquareVariable();
        if (s2 === peg$FAILED) {
          s2 = await peg$parseChars_String_prefix();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c289(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameP() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 239,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsesquareVariable();
          if (s3 === peg$FAILED) {
            s3 = await peg$parseChars_String_prefix_LName();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c290(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVERTICAL() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 240,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsevertical_c();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 124) {
          s2 = peg$c202;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c203); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c291();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePATH_SYMBOL() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 241,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsedot_path();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c22;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c23); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = await peg$parsediv_path();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c50;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c51); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c292();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePEPS() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 242,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathEltOrInverse();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePATH_SYMBOL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c293(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseQNameReference() {
      var s0;

      var key    = peg$currPos * 410 + 243,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseQNameC();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseQNameA();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseQNameA() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 244,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseReferenceDot();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_variables();
        if (s2 === peg$FAILED) {
          s2 = await peg$parseChars_String_prefix_LName();
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseSubstring();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseBetweenExpression();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseLikeExpression();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseQNameC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      var key    = peg$currPos * 410 + 245,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedouble_squere_br_open();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c264) {
          s2 = peg$c264;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c265); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseReferenceDot();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseChars_String_variables();
              if (s5 === peg$FAILED) {
                s5 = await peg$parseChars_String_prefix();
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseSubstring();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsedouble_squere_br_close();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c266) {
                        s9 = peg$c266;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c267); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsespace();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parseBetweenExpression();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parseLikeExpression();
                            if (s12 === peg$FAILED) {
                              s12 = null;
                            }
                            if (s12 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseReferenceDot() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 246,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseReference();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsedot_path();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c22;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c23); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c294(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseReference() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 247,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsereferences_c();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c295(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 248,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c234.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c235); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c236;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c237); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c234.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c235); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c236;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c237); }
          }
          if (s3 === peg$FAILED) {
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c234.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c235); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c237); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c244.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c245); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c16) {
            s4 = peg$c16;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c17); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c244.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_prefix() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 410 + 249,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c234.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c235); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c236;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c237); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c46;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c47); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c234.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c235); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c236;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c237); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s3 = peg$c46;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c47); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c244.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c245); }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c234.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c235); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c237); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c46;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c47); }
              }
              if (s3 === peg$FAILED) {
                if (peg$c244.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c16) {
            s4 = peg$c16;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c17); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c244.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_prefix_LName() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 250,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c234.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c235); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c236;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c237); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c46;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c47); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c234.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c235); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s4 = peg$c236;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c237); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c46;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c47); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c22;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c23); }
              }
              if (s4 === peg$FAILED) {
                if (peg$c244.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                }
              }
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c234.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c235); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c236;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c237); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s4 = peg$c46;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c47); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c22;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c23); }
                }
                if (s4 === peg$FAILED) {
                  if (peg$c244.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c248(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_variables() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 251,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedouble_squere_br_open();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c264) {
          s2 = peg$c264;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c265); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseChars_String_variable();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsedouble_squere_br_close();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c266) {
                s5 = peg$c266;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c267); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_variable() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 252,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsevariables_c();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_prefix();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c249(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLN() {
      var s0;

      var key    = peg$currPos * 410 + 253,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseLNameINV();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseLNameINV2();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseLName();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathMod() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 254,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsequestion();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s2 = peg$c256;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c257); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = await peg$parsemult();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s2 = peg$c10;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c11); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = await peg$parseplus();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s2 = peg$c44;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c45); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameSimple() {
      var s0;

      var key    = peg$currPos * 410 + 255,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseChars_String_variables();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseChars_String_prefix_LNameA();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_prefix_LNameA() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 256,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsevariables_c();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_prefix_LName();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c249(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameINV() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 410 + 257,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePropertyReference();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseInv();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsebr_open();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s6 = peg$c18;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c19); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseLNameSimple();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsebr_close();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c20;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseSubstring();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parseBetweenExpression();
                            if (s12 === peg$FAILED) {
                              s12 = null;
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = await peg$parseLikeExpression();
                              if (s13 === peg$FAILED) {
                                s13 = null;
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = await peg$c296(s4, s7, s10, s12, s13);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameINV2() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 258,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePropertyReference();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseCheck();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseLNameSimple();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseSubstring();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseBetweenExpression();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseLikeExpression();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = await peg$c297(s4, s5, s6, s8, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstring() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 259,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsesquere_br_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c298;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c299); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = await peg$parseINTEGER();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = await peg$parsecomma_c();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c82;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c83); }
              }
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsespace();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parseINTEGER();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsesquere_br_close();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c300;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c301); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = null;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLName() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 260,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s2 = peg$c226;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c227); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePropertyReference();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseChars_String_variables();
            if (s4 === peg$FAILED) {
              s4 = await peg$parseChars_String_prefix_LNameA();
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsePathMod();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseSubstring();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseBetweenExpression();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseLikeExpression();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDoubleSquareBracketName() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 410 + 261,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsevariables_c();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsesquarePrefix();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = await peg$parsesquareVariable();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c249(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquarePrefix() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 262,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseChars_String_prefix();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsecolon_cc();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c238;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c239); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquareVariable() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 263,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsesquere_br_open();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c298;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c299); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseChars_String_square();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsesquere_br_close();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c300;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c301); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_square() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 264,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c234.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c235); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c244.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c245); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s1 = peg$c236;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c237); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c234.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c235); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c236;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c237); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c22;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c23); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c302;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c303); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s3 = peg$c50;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c51); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s3 = peg$c46;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c47); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s3 = peg$c82;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c18;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c19); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s3 = peg$c20;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                        }
                        if (s3 === peg$FAILED) {
                          if (peg$c244.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c234.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c235); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c237); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c22;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c23); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s3 = peg$c302;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c303); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s3 = peg$c50;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c51); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s3 = peg$c46;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c47); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s3 = peg$c82;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c83); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s3 = peg$c18;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c19); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s3 = peg$c20;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                          }
                          if (s3 === peg$FAILED) {
                            if (peg$c244.test(input.charAt(peg$currPos))) {
                              s3 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelation() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 265,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parserelations();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c304) {
          s2 = peg$c304;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c305); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c80;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c81); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c306) {
              s2 = peg$c306;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c307); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c308) {
                s2 = peg$c308;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c309); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c310) {
                  s2 = peg$c310;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c311); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c312) {
                    s2 = peg$c312;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c313); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                      s2 = peg$c232;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c233); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 62) {
                        s2 = peg$c246;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c247); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsespace() {
      var s0, s1;

      var key    = peg$currPos * 410 + 266,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c302;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c303); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.charCodeAt(peg$currPos) === 32) {
          s1 = peg$c302;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c303); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsespaceObl() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 267,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace_c();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c302;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c303); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.charCodeAt(peg$currPos) === 32) {
              s3 = peg$c302;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c303); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestring() {
      var s0, s1;

      var key    = peg$currPos * 410 + 268,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      if (peg$c234.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c235); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c244.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c245); }
        }
        if (s1 === peg$FAILED) {
          if (peg$c314.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c315); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c234.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c235); }
          }
          if (s1 === peg$FAILED) {
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
            if (s1 === peg$FAILED) {
              if (peg$c314.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c315); }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestringQ() {
      var s0, s1, s2;

      var key    = peg$currPos * 410 + 269,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c234.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c235); }
      }
      if (s2 === peg$FAILED) {
        if (peg$c244.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c245); }
        }
        if (s2 === peg$FAILED) {
          if (peg$c316.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c317); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c234.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c235); }
          }
          if (s2 === peg$FAILED) {
            if (peg$c244.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c245); }
            }
            if (s2 === peg$FAILED) {
              if (peg$c316.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c317); }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c318(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestring2() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 410 + 270,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace_c();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c234.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c235); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c234.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c235); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLikeExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 410 + 271,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parselike_c();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c319) {
            s3 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c320); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c321) {
              s3 = peg$c321;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c322); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 126) {
                s3 = peg$c323;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c324); }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parselikeString1();
              if (s5 === peg$FAILED) {
                s5 = await peg$parselikeString2();
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parselikeString1() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 272,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedubble_quote();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c262;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c263); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsepercent();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 37) {
              s4 = peg$c242;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c243); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c234.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c235); }
              }
              if (s6 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s6 = peg$c236;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c237); }
                }
                if (s6 === peg$FAILED) {
                  if (peg$c244.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c234.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c235); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 95) {
                      s6 = peg$c236;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c237); }
                    }
                    if (s6 === peg$FAILED) {
                      if (peg$c244.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                      }
                    }
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsepercent();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 37) {
                    s7 = peg$c242;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c243); }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsedubble_quote();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s9 = peg$c262;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c263); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parselikeString2() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 410 + 273,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsequote();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c260;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c261); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsepercent();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 37) {
              s4 = peg$c242;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c243); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c234.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c235); }
              }
              if (s6 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s6 = peg$c236;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c237); }
                }
                if (s6 === peg$FAILED) {
                  if (peg$c244.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c234.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c235); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 95) {
                      s6 = peg$c236;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c237); }
                    }
                    if (s6 === peg$FAILED) {
                      if (peg$c244.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c245); }
                      }
                    }
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsepercent();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 37) {
                    s7 = peg$c242;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c243); }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsequote();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s9 = peg$c260;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c261); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBetweenExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      var key    = peg$currPos * 410 + 274,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsebetween_c();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c325) {
            s3 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c326); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsebr_open();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s6 = peg$c18;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c19); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseAdditiveExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseComma();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parseAdditiveExpression();
                            if (s12 !== peg$FAILED) {
                              s13 = await peg$parsebr_close();
                              if (s13 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                  s14 = peg$c20;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { await peg$fail(peg$c21); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseunit() {
      var s0, s1;

      var key    = peg$currPos * 410 + 275,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c328();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseunion() {
      var s0, s1;

      var key    = peg$currPos * 410 + 276,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c329();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseno_class() {
      var s0, s1;

      var key    = peg$currPos * 410 + 277,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c330();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecurv_br_open() {
      var s0, s1;

      var key    = peg$currPos * 410 + 278,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c331();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecurv_br_close() {
      var s0, s1;

      var key    = peg$currPos * 410 + 279,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c332();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsetwo_dots() {
      var s0, s1;

      var key    = peg$currPos * 410 + 280,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c333();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedot() {
      var s0, s1;

      var key    = peg$currPos * 410 + 281,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c334();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedot_path() {
      var s0, s1;

      var key    = peg$currPos * 410 + 282,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c335();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedot_in_br() {
      var s0, s1;

      var key    = peg$currPos * 410 + 283,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c336();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseselect_this() {
      var s0, s1;

      var key    = peg$currPos * 410 + 284,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c337();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsethis_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 285,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c338();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseor() {
      var s0, s1;

      var key    = peg$currPos * 410 + 286,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c339();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseand() {
      var s0, s1;

      var key    = peg$currPos * 410 + 287,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c340();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsein_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 288,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c341();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsenot_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 289,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c342();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsenotIn_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 290,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c343();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseconcat_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 291,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c344();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseplus() {
      var s0, s1;

      var key    = peg$currPos * 410 + 292,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c345();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseminus() {
      var s0, s1;

      var key    = peg$currPos * 410 + 293,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c346();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseexclamation() {
      var s0, s1;

      var key    = peg$currPos * 410 + 294,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c347();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsea_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 295,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c348();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemult() {
      var s0, s1;

      var key    = peg$currPos * 410 + 296,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c349();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsediv() {
      var s0, s1;

      var key    = peg$currPos * 410 + 297,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c350();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsediv_path() {
      var s0, s1;

      var key    = peg$currPos * 410 + 298,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c351();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsetrue_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 299,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c352();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsefalse_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 300,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c353();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedouble_check() {
      var s0, s1;

      var key    = peg$currPos * 410 + 301,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c354();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecheck_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 302,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c355();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebr_open() {
      var s0, s1;

      var key    = peg$currPos * 410 + 303,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c356();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebr_close() {
      var s0, s1;

      var key    = peg$currPos * 410 + 304,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c357();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecount_distinct_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 305,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c358();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedistinct_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 306,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c359();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecount_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 307,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c360();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesum_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 308,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c361();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemin_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 309,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c362();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemax_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 310,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c363();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseavg_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 311,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c364();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesample_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 312,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c365();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsegroup_concat_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 313,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c366();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseseparator_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 314,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c367();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesemi_colon() {
      var s0, s1;

      var key    = peg$currPos * 410 + 315,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c368();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseequal() {
      var s0, s1;

      var key    = peg$currPos * 410 + 316,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c369();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecomma_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 317,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c370();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseundef_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 318,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c371();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestr_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 319,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c372();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parselang_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 320,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c373();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedatatype_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 321,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c374();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiri_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 322,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c375();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseuri_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 323,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c376();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseabs_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 324,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c377();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseceil_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 325,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c378();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsefloor_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 326,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c379();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseround_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 327,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c380();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestrlen_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 328,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c381();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseucase_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 329,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c382();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parselcase_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 330,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c383();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseencode_for_uri_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 331,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c384();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseyear_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 332,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c385();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemonth_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 333,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c386();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseday_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 334,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c387();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsetime_zone_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 335,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c388();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsetz_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 336,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c389();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemd5_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 337,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c390();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesha1_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 338,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c391();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA256_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 339,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c392();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA384_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 340,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c393();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA512_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 341,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c394();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisIRI_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 342,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c395();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisURI_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 343,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c396();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisBLANK_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 344,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c397();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedateTime_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 345,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c398();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedate_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 346,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c399();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisLITERAL_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 347,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c400();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisNUMERIC_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 348,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c401();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGMATCHES_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 349,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c402();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCONTAINS_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 350,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c403();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRSTARTS_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 351,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c404();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRENDS_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 352,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c405();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRBEFORE_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 353,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c406();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRAFTER_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 354,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c407();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRLANG_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 355,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c408();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRDT_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 356,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c409();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesameTerm_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 357,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c410();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedays_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 358,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c411();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseyears_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 359,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c412();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemonths_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 360,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c413();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsehours_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 361,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c414();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseminutes_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 362,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c415();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseseconds_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 363,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c416();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseif_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 364,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c417();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCOALESCE_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 365,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c418();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBOUND_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 366,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c419();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODE_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 367,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c420();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRAND_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 368,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c421();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCONCAT_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 369,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c422();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNOW_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 370,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c423();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUUID_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 371,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c424();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRUUID_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 372,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c425();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseREGEX_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 373,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c426();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUBSTRING_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 374,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c427();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUBSTR_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 375,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c428();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebif_SUBSTRING_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 376,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c429();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebif_SUBSTR_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 377,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c430();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseREPLACE_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 378,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c431();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseEXISTS_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 379,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c432();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseat() {
      var s0, s1;

      var key    = peg$currPos * 410 + 380,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c433();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecolon() {
      var s0, s1;

      var key    = peg$currPos * 410 + 381,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c434();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsequestion() {
      var s0, s1;

      var key    = peg$currPos * 410 + 382,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c435();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedubble_question() {
      var s0, s1;

      var key    = peg$currPos * 410 + 383,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c436();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedollar() {
      var s0, s1;

      var key    = peg$currPos * 410 + 384,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c437();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsequote() {
      var s0, s1;

      var key    = peg$currPos * 410 + 385,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c438();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedubble_quote() {
      var s0, s1;

      var key    = peg$currPos * 410 + 386,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c439();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseinv_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 387,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c440();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquere_br_open() {
      var s0, s1;

      var key    = peg$currPos * 410 + 388,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c441();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquere_br_close() {
      var s0, s1;

      var key    = peg$currPos * 410 + 389,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c442();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedouble_squere_br_open() {
      var s0, s1;

      var key    = peg$currPos * 410 + 390,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c443();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedouble_squere_br_close() {
      var s0, s1;

      var key    = peg$currPos * 410 + 391,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c444();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parserelations() {
      var s0, s1;

      var key    = peg$currPos * 410 + 392,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c445();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parselike_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 393,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c446();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemore() {
      var s0, s1;

      var key    = peg$currPos * 410 + 394,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c447();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseless() {
      var s0, s1;

      var key    = peg$currPos * 410 + 395,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c448();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsepercent() {
      var s0, s1;

      var key    = peg$currPos * 410 + 396,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c449();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebetween_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 397,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c450();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseint_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 398,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c336();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestring_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 399,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c336();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestar() {
      var s0, s1;

      var key    = peg$currPos * 410 + 400,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c336();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecolon_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 401,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c434();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsevertical_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 402,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c451();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecolon_cc() {
      var s0, s1;

      var key    = peg$currPos * 410 + 403,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c452();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsespace_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 404,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c330();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePropertyReference_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 405,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c453();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsevariables_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 406,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c454();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsereferences_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 407,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c455();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseassociations_c() {
      var s0, s1;

      var key    = peg$currPos * 410 + 408,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c456();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseend() {
      var s0, s1;

      var key    = peg$currPos * 410 + 409,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c327;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c457();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


    			// parse can have multiple arguments
    			// parse(string, options) where options is an object
    			// {schema: VQ_Schema, symbol_table:JSON, context:class_identification_object}
options = arguments[1];
  
    			//////////////////////////////////////////////
    		var continuations = {};
        			
        	function makeArray(value){
        		if (continuations[value]==null) {
        			continuations[value] = {};
        		}
        		return continuations;
        	}
        			
        	async function getReferences(place, priority){
        		for(let key in options["symbol_table"]){
					if(typeof options["symbol_table"][key] !== "function"){
						for(let k in options["symbol_table"][key]){
							if(typeof options["symbol_table"][key][k] !== "function" && options["symbol_table"][key][k]["kind"] == "CLASS_ALIAS") await addContinuation(place, key, priority, false, 3);
						}
					}
        		};
        	}
        	async function getProperties(place, priority){
				if (options.text.split(/[.\/]/).length <= 1 && options.text.indexOf("^") ==-1){
					var selected_elem_id = Session.get("activeElement");
					var act_el;
					if (Elements.findOne({_id: selected_elem_id})){ //Because in case of deleted element ID is still "activeElement"
						act_el = new VQ_Element(selected_elem_id)
						}
					if((act_el.isUnit() != true && act_el.isUnion() != true) || !act_el.isRoot()) {
						
						var newStartElement = act_el;
						if ((act_el.isUnion() || act_el.isUnit()) && !act_el.isRoot()) { // [ + ] element, that has link to upper class 
							if (act_el.getLinkToRoot()){
								var element = act_el.getLinkToRoot().link.getElements();
								if (act_el.getLinkToRoot().start) {
									newStartElement = new VQ_Element(element.start.obj._id);
								} else {
									newStartElement = new VQ_Element(element.end.obj._id);						
								}						
							}					
						}
						
						var prop = await dataShapes.getProperties({propertyKind:'Data'}, newStartElement);
						prop = prop["data"];
						
						var schemaName = dataShapes.schema.schemaType;
						if(typeof schemaName === "undefined") schemaName = "";
						
						for(let cl in prop){
							if(typeof prop[cl] !== "function"){
								var prefix;
								if((prop[cl]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
									|| (schemaName.toLowerCase() == "wikidata" && prop[cl]["prefix"] == "wdt"))prefix = "";
								else prefix = prop[cl]["prefix"]+":";

								var propName = prefix+prop[cl]["display_name"]
								await addContinuation(place, propName, 100, false, 1);
								if(prop[cl]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(place, prop[cl]["prefix"]+":"+prop[cl]["display_name"], 100, false, 1);
							}
						}
							
						await getAssociations(place, 95);
						await getPropertyAlias(place, 93);
					}
				}
   			}
        	async function getPropertyAlias(place, priority){	
        		var selected_elem_id = Session.get("activeElement");
        		for (var  key in options["symbol_table"]) {	
        			for (var symbol in options["symbol_table"][key]) {
        				if(options["symbol_table"][key][symbol]["context"] != selected_elem_id){				
							if(options["symbol_table"][key][symbol]["upBySubQuery"] == 1 && (typeof options["symbol_table"][key][symbol]["distanceFromClass"] === "undefined" || options["symbol_table"][key][symbol]["distanceFromClass"] <= 1 ))await addContinuation(place, key, priority, false, 3);
        				} else if(options["symbol_table"][key][symbol]["kind"] !== null && options["symbol_table"][key][symbol]["kind"] == "PROPERTY_ALIAS") {
							await addContinuation(place, key, priority, false, 3);		
						}
        			}	
        		}
        	}
        			
        	async function getAssociations(place, priority){
    			var selected_elem_id = Session.get("activeElement");
    			var act_el;
    			if (Elements.findOne({_id: selected_elem_id})){ //Because in case of deleted element ID is still "activeElement"
    				act_el = new VQ_Element(selected_elem_id)
    			}
    			if((act_el.isUnit() != true && act_el.isUnion() != true) || !act_el.isRoot()) {	
					var newStartElement = act_el;
						if ((act_el.isUnion() || act_el.isUnit()) && !act_el.isRoot()) { // [ + ] element, that has link to upper class 
							if (act_el.getLinkToRoot()){
								var element = act_el.getLinkToRoot().link.getElements();
								if (act_el.getLinkToRoot().start) {
									newStartElement = new VQ_Element(element.start.obj._id);
								} else {
									newStartElement = new VQ_Element(element.end.obj._id);						
								}						
							}					
					}
					var prop = await dataShapes.getProperties({propertyKind:'ObjectExt'}, newStartElement);
					prop = prop["data"];
					
					var schemaName = dataShapes.schema.schemaType;
					if(typeof schemaName === "undefined") schemaName = "";
					
					for(let cl in prop){
						if(typeof prop[cl] !== "function"){
							var prefix;
							if((prop[cl]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
								|| (schemaName.toLowerCase() == "wikidata" && prop[cl]["prefix"] == "wdt"))prefix = "";
							else prefix = prop[cl]["prefix"]+":";

							var propName = prefix+prop[cl]["display_name"]
							if(prop[cl]["mark"] == "in") propName = "^" + propName;
							await addContinuation(place, propName, priority, false, 2);
							var mark = "";
							if(prop[cl]["mark"] == "in") mark = "^";
							if(prop[cl]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(place, mark+prop[cl]["prefix"]+":"+prop[cl]["display_name"], 100, false, 2);
						}
					}
				}
        	}
        			
        	async function addContinuation(place, continuation, priority, spaceBefore, type, start_end){
        		var position = "start";
        		if(start_end != null)position = start_end;
        		makeArray(place[position]["offset"]);
        		if(typeof continuations[place[position]["offset"]][continuation] === "undefined" || continuations[place[position]["offset"]][continuation]["priority"] > priority) 
        		{
        			continuations[place[position]["offset"]][continuation]={name:continuation, priority:priority, type:type, spaceBefore:spaceBefore};
        		}
        	}
        			
        	async function returnContinuation(){
				continuations["time"] =  options.time;
        		return JSON.stringify(continuations,null,2);
        	}

        	function makeVar(o) {return makeString(o);};

        	// string -> idObject
        	// returns type of the identifier from symbol table. Null if does not exist.
        	// returns type of the identifier from symbol table. Null if does not exist.
        	async function resolveTypeFromSymbolTable(id) {
            	var context = options.context._id;
            	// if(typeof options.symbol_table === 'undefined' || typeof options.symbol_table[context] === 'undefined') return null;
				
				
				
            	var st_row = options.symbol_table[id];
            	if (st_row) {
            		if(st_row.length == 0) return null;
            		if(st_row.length == 1){
            			return st_row[0].type
            		}
            		if(st_row.length > 1){
						for (var symbol in st_row) {
            				if(st_row[symbol]["context"] == context) return st_row[symbol].type;
            			}
            		}
            		return st_row.type
            	} else {
					return null
            	}
            	return null
           };
		   
            // string -> idObject
            // returns kind of the identifier from symbol table. Null if does not exist.
            async function resolveKindFromSymbolTable(id) {
            	var context = options.context._id;

            	// if(typeof options.symbol_table === 'undefined' || typeof options.symbol_table[context] === 'undefined') return null;

            	var st_row = options.symbol_table[id];
            	if (st_row) {
            		if(st_row.length == 0) return null;
            		if(st_row.length == 1){
            			return st_row[0].kind
            		}
            		if(st_row.length > 1){
            			for (var symbol in st_row) {
            				if(st_row[symbol]["context"] == context) return st_row[symbol].kind;
            			}
            		}
            		return st_row.kind
            	} else {
            		return null
            	}
            	return null
            };
            			
			// string -> idObject
            // returns type of the identifier from schema assuming that it is name of the class. Null if does not exist
            async function resolveTypeFromSchemaForClass(id) {
            	var cls = await dataShapes.resolveClassByName({name: id})
            	if(cls["complete"] == false) return null;
            	if(cls["data"].length > 0){
            		return cls["data"][0];
            	}
            				
            	return null;
            };
			
            // string -> idObject
            // returns type of the identifier from schema assuming that it is name of the property (attribute or association). Null if does not exist
            async function resolveTypeFromSchemaForAttributeAndLink(id) {

            	var aorl = await dataShapes.resolvePropertyByName({name: id})
            	// var aorl = options.schema.resolveAttributeByNameAndClass(options.context["localName"], id);
            	if(aorl["complete"] == false) return null;
            	var res = aorl["data"][0];
            	if(res){
					if(res["data_cnt"] > 0 && res["object_cnt"] > 0) res["property_type"] = "DATA_OBJECT_PROPERTY";
            		else if(res["data_cnt"] > 0) res["property_type"] = "DATA_PROPERTY";
            		else if(res["object_cnt"] > 0) res["property_type"] = "OBJECT_PROPERTY";
            		return res;
            	}
    			
            	return null
            };
			
            // string -> idObject
            // returns type of the identifier from schema. Looks everywhere. First in the symbol table,
            // then in schema. Null if does not exist
            async function resolveType(id) {           			  
            	if(id !== "undefined"){
					var t=await resolveTypeFromSymbolTable(id);
            		if (!t) {
            			if (options.exprType) {
							t= await resolveTypeFromSchemaForClass(id);
            				if (!t) {
								t=await resolveTypeFromSchemaForAttributeAndLink(id)
            				}
						} else {
            				t=await resolveTypeFromSchemaForAttributeAndLink(id);
            				if (!t) {
								t=await resolveTypeFromSchemaForClass(id)
            				}
            			}

            		}
					return t;}
            	return null;
            };
			
             //string -> string
             // resolves kind of id. CLASS_ALIAS, PROPERTY_ALIAS, CLASS_NAME, CLASS_ALIAS, null
             async function resolveKind(id) {
            	if(id !== "undefined"){
					var k=await resolveKindFromSymbolTable(id);
                	if (!k) {
						if (options.exprType) {
							if (await resolveTypeFromSchemaForClass(id)) {
								k="CLASS_NAME";
							} else if (await resolveTypeFromSchemaForAttributeAndLink(id)) {
									k="PROPERTY_NAME";
                			}
                		} else {
                			if (await resolveTypeFromSchemaForAttributeAndLink(id)) {
								k="PROPERTY_NAME";
                			} else if (await resolveTypeFromSchemaForClass(id)) {
								k="CLASS_NAME";
                			}
                		}
                	}
                	return k;
				}
            	return null
            };
						  
			async function getInverseAssociations(o){
				var loc = await location();
				var textEnd = loc.end.offset;
				var pathParts = options.text.substring(0, textEnd).split(/[.\/]/);
        		// var varibleName = makeVar(o);
        		var params = {main:{propertyKind:'ObjectExt',"limit": 30}}
        		if(pathParts.length > 1){
        			 params.element = {"pList": {"out": [{"name": pathParts[pathParts.length-2], "type": "out"}]}}
        		} else {
        			if (typeof options.className !== 'undefined') params.element = {className: options.className};	
        		}

				var props = await dataShapes.getPropertiesFull(params);
            	props = props["data"];
				
				var schemaName = dataShapes.schema.schemaType;
				if(typeof schemaName === "undefined") schemaName = "";

            	for(let pr in props){
					if(typeof props[pr] !== "function"){
						var prefix;
						if((props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
							|| (schemaName.toLowerCase() == "wikidata" && props[pr]["prefix"] == "wdt"))prefix = "";
						else prefix = props[pr]["prefix"]+":";
										
						var propName = prefix+props[pr]["display_name"];
						if ( props[pr].mark === 'in'){
							var mark = ""
							if(o == "^"){
								propName = "^"+propName;
								mark = "^";
							}
							else propName = "inv("+propName+")";
							await addContinuation(await location(), propName, 100, false, 2);
							if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(await location(), mark+props[pr]["prefix"]+":"+props[pr]["display_name"], 100, false, 2);
						}
					}
            	}
            	return;
			}	  
					
        	async function pathOrReference(o) {
    			var pathPrimary = o.PathEltOrInverse.PathElt.PathPrimary;
            	var propertyName = "";
            	if(typeof pathPrimary.var !== 'undefined') propertyName = pathPrimary.var.name;
            	if(typeof pathPrimary.PrefixedName !== 'undefined') propertyName = pathPrimary.PrefixedName.Prefix + pathPrimary.PrefixedName.var.name;
            	var targetSourceClass = "targetClass";
            	if(o.PathEltOrInverse.inv == "^")targetSourceClass = "sourceClass";

				var p = {main:{propertyKind:'Data',"limit": 30}, element: {"pList": {"in": [{"name": propertyName, "type": "in"}]}}}
        		var props= await dataShapes.getPropertiesFull(p);
				
				var schemaName = dataShapes.schema.schemaType;
				if(typeof schemaName === "undefined") schemaName = "";

            	props = props["data"];
            	for(let pr in props){
					if(typeof props[pr] !== "function"){
						var prefix;
						if((props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
							|| (schemaName.toLowerCase() == "wikidata" && props[pr]["prefix"] == "wdt"))prefix = "";
						else prefix = props[pr]["prefix"]+":";
										
						var propName = prefix+props[pr]["display_name"];
									
						await addContinuation(await location(), propName, 100, false, 1, "end");
						if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(await location(), props[pr]["prefix"]+":"+props[pr]["display_name"], 100, false, 1, "end");
					}
				}
							
				var p = {main:{propertyKind:'ObjectExt',"limit": 30}, element: {"pList": {"in": [{"name": propertyName, "type": "in"}]}}}
        		var props= await dataShapes.getPropertiesFull(p);

            	props = props["data"];

            	for(let pr in props){
					if(typeof props[pr] !== "function"){
						var prefix;
						if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")prefix = "";
						else prefix = props[pr]["prefix"]+":";
										
						var propName = prefix+props[pr]["display_name"];
						var mark = "";
						if ( props[pr].mark === 'in'){
							propName = "^"+propName;
							mark = "^";
						}
									
						await addContinuation(await location(), propName, 100, false, 2, "end");
						if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(await location(), mark+props[pr]["prefix"]+":"+props[pr]["display_name"], 100, false, 2, "end");
					}
				}
            	return o;
            };
        			
			async function ifObjectDataProperty(o){
        				// var varibleName;
        				
        				// if(typeof o.var !== "undefined") varibleName = makeVar(o.Prefix) + makeVar(o.var.name);
        				// else  varibleName = makeVar(o);
        				// if(options.schema.resolveLinkByName(varibleName) != null) await addContinuation(await location(), ".", 99, false, 4, "end");
        				// if(await resolveTypeFromSchemaForAttributeAndLink(varibleName) == null) await addContinuation(await location(), ":", 30, false, 4, "end");
        				
        				//console.log(o, varibleName, resolveTypeFromSchemaForAttributeAndLink(varibleName));
        				
        		return o;
        	}
			
    		async function afterVar(o) {
				var varibleName = makeVar(o);
				var selected_elem_id = Session.get("activeElement");
    			var act_el;
    			if (Elements.findOne({_id: selected_elem_id})){ //Because in case of deleted element ID is still "activeElement"
    				act_el = new VQ_Element(selected_elem_id)
    			}
				if((act_el.isUnit() != true && act_el.isUnion() != true) || !act_el.isRoot()) {
					var newStartElement = act_el;
					var className = options.className;
					if ((act_el.isUnion() || act_el.isUnit()) && !act_el.isRoot()) { // [ + ] element, that has link to upper class 
						if (act_el.getLinkToRoot()){
							var element = act_el.getLinkToRoot().link.getElements();
							if (act_el.getLinkToRoot().start) {
								newStartElement = new VQ_Element(element.start.obj._id);
								className = newStartElement.getName();
							} else {
								newStartElement = new VQ_Element(element.end.obj._id);	
								className = newStartElement.getName();									
							}						
						}					
					}
					
					
					var loc = await location();
					var textEnd = loc.end.offset;
					var pathParts = options.text.substring(0, textEnd).split(/[.\/]/);
					var varibleName = makeVar(o);
					var params = {main:{propertyKind:'Data',"limit": 30}}
					var isInv = false;
								
					if(pathParts.length > 1){
						
						var varName = pathParts[pathParts.length-2];
						if(varName.startsWith("^")){
							params.element = {"pList": {"out": [{"name": varName.substring(1), "type": "out"}]}}
						} else params.element = {"pList": {"in": [{"name": varName, "type": "in"}]}}
						params.main.filter=pathParts[pathParts.length-1];
						if(pathParts[pathParts.length-1].startsWith("^")){
							isInv = true;
							params.main.filter=pathParts[pathParts.length-1].substr(1);
							// params.element = {"pList": {"out": [{"name": pathParts[pathParts.length-2], "type": "out"}]}}
						} else if(pathParts[pathParts.length-1].toLowerCase().startsWith("inv(")){
							isInv = true;
							params.main.filter=pathParts[pathParts.length-1].substr(4);
										 // params.element = {"pList": {"out": [{"name": pathParts[pathParts.length-2], "type": "out"}]}}
						}
					} else {

						if (typeof className !== 'undefined') params.element = {className: className};
						if (varibleName != "") params.main.filter=varibleName;
			
						if(pathParts[0].startsWith("^"))isInv = true;
					}
					
					var props = await dataShapes.getPropertiesFull(params);
					props = props["data"];
						
					var schemaName = dataShapes.schema.schemaType;
					if(typeof schemaName === "undefined") schemaName = "";
					
					if(isInv == false){
						
						
						for(let pr in props){
							if(typeof props[pr] !== "function"){
								var prefix;
								if((props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
									|| (schemaName.toLowerCase() == "wikidata" && props[pr]["prefix"] == "wdt"))prefix = "";
								else prefix = props[pr]["prefix"]+":";
								var propName = prefix+props[pr]["display_name"];
								await addContinuation(await location(), propName, 100, false, 1);
								if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(await location(), props[pr]["prefix"]+":"+props[pr]["display_name"], 100, false, 1);
							}
						}
					}
					// var params = {main:{propertyKind:'ObjectExt',"limit": 30}}
					params.main.propertyKind = 'ObjectExt'
					var props = await dataShapes.getPropertiesFull(params);				
					
					props = props["data"];
					
					
					
					for(let pr in props){
						if(typeof props[pr] !== "function"){
							var prefix;
							if((props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") 
								|| (schemaName.toLowerCase() == "wikidata" && props[pr]["prefix"] == "wdt"))prefix = "";
							else prefix = props[pr]["prefix"]+":";
											
							var propName = prefix+props[pr]["display_name"];
							if ( props[pr].mark === 'in' && isInv == false){
								propName = "^"+propName;
							}
							if(isInv == false){
								await addContinuation(await location(), propName, 100, false, 2);
								if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") {
									if ( props[pr].mark === 'in' && isInv == false){
										propName = "^"+props[pr]["prefix"]+":"+props[pr]["display_name"];
									}else {
										await addContinuation(await location(), propName, 100, false, 2);
									}
								}
							}else if(isInv == true && props[pr].mark === 'in'){
								await addContinuation(await location(), "^" + propName, 100, false, 2, "end");
								if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") {
									await addContinuation(await location(), "^"+props[pr]["prefix"]+":"+props[pr]["display_name"], 100, false, 2, "end");
								}
							}
						}
					}
				}
				return o;
    		};
        			
        	async function referenceNames(o) {	
				var classAliasTable = [];
        		for(let key in options["symbol_table"]){
					if(typeof options["symbol_table"][key] !== "function"){
						for(let k in options["symbol_table"][key]){
							if(typeof options["symbol_table"][key][k] !== "function" && options["symbol_table"][key][k]["kind"] == "CLASS_ALIAS") classAliasTable[key] = options["symbol_table"][key][k]["type"]["local_name"]
						}
					}
        		};
				var loc = await location();
        		if(typeof classAliasTable[o] !== 'undefined') {
					continuations[loc["end"]["offset"]] = {};
					var params = {main:{propertyKind:'Data',"limit": 30}};
					params.element = {className: classAliasTable[o]};	

            		var props = await dataShapes.getPropertiesFull(params);
            		props = props["data"];
					
					var schemaName = dataShapes.schema.schemaType;
					if(typeof schemaName === "undefined") schemaName = "";

            		for(let pr in props){
						if(typeof props[pr] !== "function"){
							var prefix;
							if((props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
								|| (schemaName.toLowerCase() == "wikidata" && props[pr]["prefix"] == "wdt"))prefix = "";
							else prefix = props[pr]["prefix"]+":";
										
							var propName = prefix+props[pr]["display_name"];
							await addContinuation(await location(), propName, 100, false, 1, "end");
							if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(await location(), props[pr]["prefix"]+":"+props[pr]["display_name"], 100, false, 1, "end");
						}
					}
					params.main.propertyKind = "Object";
					var props = await dataShapes.getPropertiesFull(params);
            		props = props["data"];

            		for(let pr in props){
						if(typeof props[pr] !== "function"){
							var prefix;
							if((props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
								|| (schemaName.toLowerCase() == "wikidata" && props[pr]["prefix"] == "wdt"))prefix = "";
							else prefix = props[pr]["prefix"]+":";
										
							var propName = prefix+props[pr]["display_name"];
							if ( props[pr].mark === 'in'){
								if(o == "^")propName = "^"+propName;
								else propName = "inv("+propName+")";
							}
							await addContinuation(await location(), propName, 100, false, 2, "end");
						}
            		}
				} else {
					var selected_elem_id = Session.get("activeElement");
					var act_el;
					if (Elements.findOne({_id: selected_elem_id})){ //Because in case of deleted element ID is still "activeElement"
						act_el = new VQ_Element(selected_elem_id)
					}
					if((act_el.isUnit() != true && act_el.isUnion() != true) || !act_el.isRoot()) {	
						var loc = await location();
						var textEnd = loc.end.offset;
						var pathParts = options.text.substring(0, textEnd).split(/[.\/]/);
						
						var newStartElement = act_el;
						var className = options.className;
						if ((act_el.isUnion() || act_el.isUnit()) && !act_el.isRoot()) { // [ + ] element, that has link to upper class 
							if (act_el.getLinkToRoot()){
								var element = act_el.getLinkToRoot().link.getElements();
								if (act_el.getLinkToRoot().start) {
									newStartElement = new VQ_Element(element.start.obj._id);
									className = newStartElement.getName();
								} else {
									newStartElement = new VQ_Element(element.end.obj._id);	
									className = newStartElement.getName();									
								}						
							}					
						}
								
						var prop;
						if(pathParts.length > 1){
							var params = {main:{propertyKind:'Data',"limit": 30}}
							params.element = {"pList": {"in": [{"name": pathParts[pathParts.length-2], "type": "in"}]}}
							if(pathParts[pathParts.length-1].startsWith("^")){
								params.element = {"pList": {"out": [{"name": pathParts[pathParts.length-2], "type": "out"}]}}
							} else if(pathParts[pathParts.length-1].toLowerCase().startsWith("inv(")){
								params.element = {"pList": {"out": [{"name": pathParts[pathParts.length-2], "type": "out"}]}}
							}
										 
							prop = await dataShapes.getPropertiesFull(params);
										 
						} else prop = await dataShapes.getProperties({propertyKind:'Data'}, newStartElement);
								
						prop = prop["data"];
						
						var schemaName = dataShapes.schema.schemaType;
						if(typeof schemaName === "undefined") schemaName = "";
						
						for(let cl in prop){
							if(typeof prop[cl] !== "function"){
								var prefix;
								if((prop[cl]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
									|| (schemaName.toLowerCase() == "wikidata" && prop[cl]["prefix"] == "wdt"))prefix = "";
								else prefix = prop[cl]["prefix"]+":";

								var propName = prefix+prop[cl]["display_name"]
								// await addContinuation(place, propName, priority, false, 2);
								await addContinuation(await location(), propName, 99, false, 1, "end");
								if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(await location(), props[pr]["prefix"]+":"+props[pr]["display_name"], 100, false, 1, "end");
							}
						}
								
						if(pathParts.length > 1){
							var params = {main:{propertyKind:'ObjectExt',"limit": 30}}
							params.element = {"pList": {"in": [{"name": pathParts[pathParts.length-2], "type": "in"}]}}
									// if(pathParts[pathParts.length-1].startsWith("^")){
										// params.element = {"pList": {"out": [{"name": pathParts[pathParts.length-2], "type": "out"}]}}
									// } else if(pathParts[pathParts.length-1].toLowerCase().startsWith("inv(")){
										// params.element = {"pList": {"out": [{"name": pathParts[pathParts.length-2], "type": "out"}]}}
									// }
										 
							prop = await dataShapes.getPropertiesFull(params);
										 
						} else prop = await dataShapes.getProperties({propertyKind:'ObjectExt'}, newStartElement);
						prop = prop["data"];
						
						for(let cl in prop){
							if(typeof prop[cl] !== "function"){
								var prefix;
								if((prop[cl]["is_local"] == true && await dataShapes.schema.showPrefixes === "false")
									|| (schemaName.toLowerCase() == "wikidata" && prop[cl]["prefix"] == "wdt"))prefix = "";
								else prefix = prop[cl]["prefix"]+":";

								var propName = prefix+prop[cl]["display_name"]
								var mark = "";
								if(prop[cl]["mark"] == "in") {
									propName = "^" + propName;
									mark = "^";
								}
								// await addContinuation(place, propName, priority, false, 2);
								await addContinuation(await location(), propName, 99, false, 2, "end");
								if(props[pr]["is_local"] == true && await dataShapes.schema.showPrefixes === "false") await addContinuation(await location(), mark+props[pr]["prefix"]+":"+props[pr]["display_name"], 99, false, 2, "end");
							}
						}
					}
				}
        		return o;
        	};
    		

    peg$result = await peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        await peg$fail({ type: "end", description: "end of input" });
      }

      throw await peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? await peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : await peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()
}).call(this);